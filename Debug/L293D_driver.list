
L293D_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d24  08003d24  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d2c  08003d2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000070  08003da4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003da4  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eeaa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d65  00000000  00000000  0002ef4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00030cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  000318f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220c5  00000000  00000000  00032488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee31  00000000  00000000  0005454d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1120  00000000  00000000  0006337e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013449e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000375c  00000000  00000000  001344f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003ca8 	.word	0x08003ca8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003ca8 	.word	0x08003ca8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <L293D_motor_init>:

void L293D_motor_init(struct L293D_motor_t *pmotor, TIM_HandleTypeDef *htim,
		uint32_t tim_channel, uint8_t clockwise_rotation_enable_pin,
		uint8_t counterclockwise_rotation_enable_pin,
		GPIO_TypeDef *clockwise_rotation_enable_port,
		GPIO_TypeDef *counterclockwise_rotation_enable_port){
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
 80005c4:	70fb      	strb	r3, [r7, #3]

	pmotor->htimer = htim;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	68ba      	ldr	r2, [r7, #8]
 80005ca:	601a      	str	r2, [r3, #0]
	pmotor->timer_channel = tim_channel;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	605a      	str	r2, [r3, #4]
	pmotor->clockwise_rotation_enable_pin = clockwise_rotation_enable_pin;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	78fa      	ldrb	r2, [r7, #3]
 80005d6:	731a      	strb	r2, [r3, #12]
	pmotor->counterclockwise_rotation_enable_pin = counterclockwise_rotation_enable_pin;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	7e3a      	ldrb	r2, [r7, #24]
 80005dc:	751a      	strb	r2, [r3, #20]
	pmotor->clockwise_rotation_enable_port = clockwise_rotation_enable_port;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	69fa      	ldr	r2, [r7, #28]
 80005e2:	609a      	str	r2, [r3, #8]
	pmotor->counterclockwise_rotation_enable_port = counterclockwise_rotation_enable_port;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	6a3a      	ldr	r2, [r7, #32]
 80005e8:	611a      	str	r2, [r3, #16]
	pmotor->direction_of_rotation_flag = MOTOR_ROTATION_CLOCKWISE;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2201      	movs	r2, #1
 80005ee:	755a      	strb	r2, [r3, #21]

}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <EnorDi_pwm_signal>:

void EnorDi_pwm_signal(struct L293D_motor_t *pmotor, uint8_t EnorDi){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d108      	bne.n	8000620 <EnorDi_pwm_signal+0x24>
		HAL_TIM_PWM_Start(pmotor->htimer, pmotor->timer_channel);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	4619      	mov	r1, r3
 8000618:	4610      	mov	r0, r2
 800061a:	f001 fee3 	bl	80023e4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Stop(pmotor->htimer, pmotor->timer_channel);
	}else{
		//wrong parameter passed
	}

}
 800061e:	e00a      	b.n	8000636 <EnorDi_pwm_signal+0x3a>
	}else if(EnorDi == DISABLE){
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d107      	bne.n	8000636 <EnorDi_pwm_signal+0x3a>
		HAL_TIM_PWM_Stop(pmotor->htimer, pmotor->timer_channel);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	4619      	mov	r1, r3
 8000630:	4610      	mov	r0, r2
 8000632:	f001 ff9f 	bl	8002574 <HAL_TIM_PWM_Stop>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <increase_motor_speed>:

void increase_motor_speed(struct L293D_motor_t *pmotor){
 8000640:	b480      	push	{r7}
 8000642:	b087      	sub	sp, #28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

	uint32_t current_timer_pulse;
	uint32_t demanded_timer_pulse;
	uint32_t current_timer_period;

	current_timer_period = pmotor->htimer->Instance->ARR;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000650:	60fb      	str	r3, [r7, #12]

	if(pmotor->timer_channel == TIM_CHANNEL_1){
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d105      	bne.n	8000666 <increase_motor_speed+0x26>
		current_timer_pulse = pmotor->htimer->Instance->CCR1;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	e01c      	b.n	80006a0 <increase_motor_speed+0x60>
	}else if(pmotor->timer_channel == TIM_CHANNEL_2){
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	2b04      	cmp	r3, #4
 800066c:	d105      	bne.n	800067a <increase_motor_speed+0x3a>
		current_timer_pulse = pmotor->htimer->Instance->CCR2;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	e012      	b.n	80006a0 <increase_motor_speed+0x60>
	}else if(pmotor->timer_channel == TIM_CHANNEL_3){
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	2b08      	cmp	r3, #8
 8000680:	d105      	bne.n	800068e <increase_motor_speed+0x4e>
		current_timer_pulse = pmotor->htimer->Instance->CCR3;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	e008      	b.n	80006a0 <increase_motor_speed+0x60>
	}else if(pmotor->timer_channel == TIM_CHANNEL_4){
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	2b0c      	cmp	r3, #12
 8000694:	d104      	bne.n	80006a0 <increase_motor_speed+0x60>
		current_timer_pulse = pmotor->htimer->Instance->CCR4;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	617b      	str	r3, [r7, #20]
	}

	if((current_timer_pulse + (current_timer_period / 30)) <= current_timer_period){
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4a20      	ldr	r2, [pc, #128]	; (8000724 <increase_motor_speed+0xe4>)
 80006a4:	fba2 2303 	umull	r2, r3, r2, r3
 80006a8:	091a      	lsrs	r2, r3, #4
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	4413      	add	r3, r2
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d308      	bcc.n	80006c6 <increase_motor_speed+0x86>
		demanded_timer_pulse = (uint32_t)(current_timer_pulse + (current_timer_period / 30));
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <increase_motor_speed+0xe4>)
 80006b8:	fba2 2303 	umull	r2, r3, r2, r3
 80006bc:	091b      	lsrs	r3, r3, #4
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	4413      	add	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	e001      	b.n	80006ca <increase_motor_speed+0x8a>
	}else{
		demanded_timer_pulse = current_timer_period;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	613b      	str	r3, [r7, #16]
	}

	if(pmotor->timer_channel == TIM_CHANNEL_1){
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d105      	bne.n	80006de <increase_motor_speed+0x9e>
		pmotor->htimer->Instance->CCR1 = demanded_timer_pulse;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	693a      	ldr	r2, [r7, #16]
 80006da:	635a      	str	r2, [r3, #52]	; 0x34
		pmotor->htimer->Instance->CCR3 = demanded_timer_pulse;
	}else if(pmotor->timer_channel == TIM_CHANNEL_4){
		pmotor->htimer->Instance->CCR4 = demanded_timer_pulse;
	}

}
 80006dc:	e01c      	b.n	8000718 <increase_motor_speed+0xd8>
	}else if(pmotor->timer_channel == TIM_CHANNEL_2){
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d105      	bne.n	80006f2 <increase_motor_speed+0xb2>
		pmotor->htimer->Instance->CCR2 = demanded_timer_pulse;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80006f0:	e012      	b.n	8000718 <increase_motor_speed+0xd8>
	}else if(pmotor->timer_channel == TIM_CHANNEL_3){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	2b08      	cmp	r3, #8
 80006f8:	d105      	bne.n	8000706 <increase_motor_speed+0xc6>
		pmotor->htimer->Instance->CCR3 = demanded_timer_pulse;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	693a      	ldr	r2, [r7, #16]
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000704:	e008      	b.n	8000718 <increase_motor_speed+0xd8>
	}else if(pmotor->timer_channel == TIM_CHANNEL_4){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	2b0c      	cmp	r3, #12
 800070c:	d104      	bne.n	8000718 <increase_motor_speed+0xd8>
		pmotor->htimer->Instance->CCR4 = demanded_timer_pulse;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000718:	bf00      	nop
 800071a:	371c      	adds	r7, #28
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	88888889 	.word	0x88888889

08000728 <select_motor_rotation_direction>:
	}

}


void select_motor_rotation_direction(struct L293D_motor_t *pmotor, uint8_t direction){
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]

	if(direction == MOTOR_ROTATION_CLOCKWISE){
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d122      	bne.n	8000780 <select_motor_rotation_direction+0x58>
			HAL_GPIO_WritePin(pmotor->counterclockwise_rotation_enable_port,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6918      	ldr	r0, [r3, #16]
					pmotor->counterclockwise_rotation_enable_pin, GPIO_PIN_RESET);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7d1b      	ldrb	r3, [r3, #20]
			HAL_GPIO_WritePin(pmotor->counterclockwise_rotation_enable_port,
 8000742:	b29b      	uxth	r3, r3
 8000744:	2200      	movs	r2, #0
 8000746:	4619      	mov	r1, r3
 8000748:	f001 f878 	bl	800183c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(pmotor->clockwise_rotation_enable_port,
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6898      	ldr	r0, [r3, #8]
					pmotor->clockwise_rotation_enable_pin, GPIO_PIN_RESET);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	7b1b      	ldrb	r3, [r3, #12]
			HAL_GPIO_WritePin(pmotor->clockwise_rotation_enable_port,
 8000754:	b29b      	uxth	r3, r3
 8000756:	2200      	movs	r2, #0
 8000758:	4619      	mov	r1, r3
 800075a:	f001 f86f 	bl	800183c <HAL_GPIO_WritePin>
			HAL_Delay(500);
 800075e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000762:	f000 fdcd 	bl	8001300 <HAL_Delay>
			HAL_GPIO_WritePin(pmotor->clockwise_rotation_enable_port,
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6898      	ldr	r0, [r3, #8]
					pmotor->clockwise_rotation_enable_pin, GPIO_PIN_SET);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	7b1b      	ldrb	r3, [r3, #12]
			HAL_GPIO_WritePin(pmotor->clockwise_rotation_enable_port,
 800076e:	b29b      	uxth	r3, r3
 8000770:	2201      	movs	r2, #1
 8000772:	4619      	mov	r1, r3
 8000774:	f001 f862 	bl	800183c <HAL_GPIO_WritePin>
			pmotor->direction_of_rotation_flag = MOTOR_ROTATION_CLOCKWISE;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	755a      	strb	r2, [r3, #21]
			HAL_GPIO_WritePin(pmotor->counterclockwise_rotation_enable_port,
					pmotor->counterclockwise_rotation_enable_pin, GPIO_PIN_SET);
			pmotor->direction_of_rotation_flag = MOTOR_ROTATION_COUNTERCLOCKWISE;
	}

}
 800077e:	e024      	b.n	80007ca <select_motor_rotation_direction+0xa2>
	}else if(direction == MOTOR_ROTATION_COUNTERCLOCKWISE){
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d121      	bne.n	80007ca <select_motor_rotation_direction+0xa2>
			HAL_GPIO_WritePin(pmotor->clockwise_rotation_enable_port,
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6898      	ldr	r0, [r3, #8]
					pmotor->clockwise_rotation_enable_pin, GPIO_PIN_RESET);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	7b1b      	ldrb	r3, [r3, #12]
			HAL_GPIO_WritePin(pmotor->clockwise_rotation_enable_port,
 800078e:	b29b      	uxth	r3, r3
 8000790:	2200      	movs	r2, #0
 8000792:	4619      	mov	r1, r3
 8000794:	f001 f852 	bl	800183c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(pmotor->counterclockwise_rotation_enable_port,
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6918      	ldr	r0, [r3, #16]
					pmotor->counterclockwise_rotation_enable_pin, GPIO_PIN_RESET);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7d1b      	ldrb	r3, [r3, #20]
			HAL_GPIO_WritePin(pmotor->counterclockwise_rotation_enable_port,
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	2200      	movs	r2, #0
 80007a4:	4619      	mov	r1, r3
 80007a6:	f001 f849 	bl	800183c <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80007aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ae:	f000 fda7 	bl	8001300 <HAL_Delay>
			HAL_GPIO_WritePin(pmotor->counterclockwise_rotation_enable_port,
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6918      	ldr	r0, [r3, #16]
					pmotor->counterclockwise_rotation_enable_pin, GPIO_PIN_SET);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	7d1b      	ldrb	r3, [r3, #20]
			HAL_GPIO_WritePin(pmotor->counterclockwise_rotation_enable_port,
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	2201      	movs	r2, #1
 80007be:	4619      	mov	r1, r3
 80007c0:	f001 f83c 	bl	800183c <HAL_GPIO_WritePin>
			pmotor->direction_of_rotation_flag = MOTOR_ROTATION_COUNTERCLOCKWISE;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2200      	movs	r2, #0
 80007c8:	755a      	strb	r2, [r3, #21]
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 fd1f 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f9cd 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e2:	f000 faf5 	bl	8000dd0 <MX_GPIO_Init>
  MX_TIM3_Init();
 80007e6:	f000 fa37 	bl	8000c58 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80007ea:	f000 fa9d 	bl	8000d28 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007ee:	f000 fac5 	bl	8000d7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  struct L293D_motor_t left_motor;
  L293D_motor_init(&left_motor, &htim3, TIM_CHANNEL_1, MOTOR1_CLOCKWISE_EN_PIN_Pin,
 80007f2:	4638      	mov	r0, r7
 80007f4:	4bb9      	ldr	r3, [pc, #740]	; (8000adc <main+0x308>)
 80007f6:	9302      	str	r3, [sp, #8]
 80007f8:	4bb8      	ldr	r3, [pc, #736]	; (8000adc <main+0x308>)
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	2304      	movs	r3, #4
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2302      	movs	r3, #2
 8000802:	2200      	movs	r2, #0
 8000804:	49b6      	ldr	r1, [pc, #728]	; (8000ae0 <main+0x30c>)
 8000806:	f7ff fed7 	bl	80005b8 <L293D_motor_init>
		  MOTOR1_COUNTERCLOCKWISE_EN_PIN_Pin, GPIOB, GPIOB);

  select_motor_rotation_direction(&left_motor, MOTOR_ROTATION_CLOCKWISE);
 800080a:	463b      	mov	r3, r7
 800080c:	2101      	movs	r1, #1
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff8a 	bl	8000728 <select_motor_rotation_direction>
  EnorDi_pwm_signal(&left_motor, ENABLE);
 8000814:	463b      	mov	r3, r7
 8000816:	2101      	movs	r1, #1
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff feef 	bl	80005fc <EnorDi_pwm_signal>

  HAL_Delay(500);
 800081e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000822:	f000 fd6d 	bl	8001300 <HAL_Delay>
  increase_motor_speed(&left_motor);
 8000826:	463b      	mov	r3, r7
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff09 	bl	8000640 <increase_motor_speed>
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000834:	461a      	mov	r2, r3
		  (int)left_motor.direction_of_rotation_flag);
 8000836:	7d7b      	ldrb	r3, [r7, #21]
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000838:	49aa      	ldr	r1, [pc, #680]	; (8000ae4 <main+0x310>)
 800083a:	48ab      	ldr	r0, [pc, #684]	; (8000ae8 <main+0x314>)
 800083c:	f002 fe06 	bl	800344c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 8000840:	48a9      	ldr	r0, [pc, #676]	; (8000ae8 <main+0x314>)
 8000842:	f7ff fce5 	bl	8000210 <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	b29a      	uxth	r2, r3
 800084a:	2314      	movs	r3, #20
 800084c:	49a6      	ldr	r1, [pc, #664]	; (8000ae8 <main+0x314>)
 800084e:	48a7      	ldr	r0, [pc, #668]	; (8000aec <main+0x318>)
 8000850:	f002 fb01 	bl	8002e56 <HAL_UART_Transmit>
  HAL_Delay(2000);
 8000854:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000858:	f000 fd52 	bl	8001300 <HAL_Delay>
  increase_motor_speed(&left_motor);
 800085c:	463b      	mov	r3, r7
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff feee 	bl	8000640 <increase_motor_speed>
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800086a:	461a      	mov	r2, r3
  		  (int)left_motor.direction_of_rotation_flag);
 800086c:	7d7b      	ldrb	r3, [r7, #21]
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 800086e:	499d      	ldr	r1, [pc, #628]	; (8000ae4 <main+0x310>)
 8000870:	489d      	ldr	r0, [pc, #628]	; (8000ae8 <main+0x314>)
 8000872:	f002 fdeb 	bl	800344c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 8000876:	489c      	ldr	r0, [pc, #624]	; (8000ae8 <main+0x314>)
 8000878:	f7ff fcca 	bl	8000210 <strlen>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	2314      	movs	r3, #20
 8000882:	4999      	ldr	r1, [pc, #612]	; (8000ae8 <main+0x314>)
 8000884:	4899      	ldr	r0, [pc, #612]	; (8000aec <main+0x318>)
 8000886:	f002 fae6 	bl	8002e56 <HAL_UART_Transmit>
  HAL_Delay(2000);
 800088a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800088e:	f000 fd37 	bl	8001300 <HAL_Delay>
  increase_motor_speed(&left_motor);
 8000892:	463b      	mov	r3, r7
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fed3 	bl	8000640 <increase_motor_speed>
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a0:	461a      	mov	r2, r3
  		  (int)left_motor.direction_of_rotation_flag);
 80008a2:	7d7b      	ldrb	r3, [r7, #21]
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 80008a4:	498f      	ldr	r1, [pc, #572]	; (8000ae4 <main+0x310>)
 80008a6:	4890      	ldr	r0, [pc, #576]	; (8000ae8 <main+0x314>)
 80008a8:	f002 fdd0 	bl	800344c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 80008ac:	488e      	ldr	r0, [pc, #568]	; (8000ae8 <main+0x314>)
 80008ae:	f7ff fcaf 	bl	8000210 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	2314      	movs	r3, #20
 80008b8:	498b      	ldr	r1, [pc, #556]	; (8000ae8 <main+0x314>)
 80008ba:	488c      	ldr	r0, [pc, #560]	; (8000aec <main+0x318>)
 80008bc:	f002 facb 	bl	8002e56 <HAL_UART_Transmit>
  HAL_Delay(2000);
 80008c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008c4:	f000 fd1c 	bl	8001300 <HAL_Delay>

  select_motor_rotation_direction(&left_motor, MOTOR_ROTATION_COUNTERCLOCKWISE);
 80008c8:	463b      	mov	r3, r7
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff2b 	bl	8000728 <select_motor_rotation_direction>
  HAL_Delay(1100);
 80008d2:	f240 404c 	movw	r0, #1100	; 0x44c
 80008d6:	f000 fd13 	bl	8001300 <HAL_Delay>
  increase_motor_speed(&left_motor);
 80008da:	463b      	mov	r3, r7
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff feaf 	bl	8000640 <increase_motor_speed>
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e8:	461a      	mov	r2, r3
  		  (int)left_motor.direction_of_rotation_flag);
 80008ea:	7d7b      	ldrb	r3, [r7, #21]
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 80008ec:	497d      	ldr	r1, [pc, #500]	; (8000ae4 <main+0x310>)
 80008ee:	487e      	ldr	r0, [pc, #504]	; (8000ae8 <main+0x314>)
 80008f0:	f002 fdac 	bl	800344c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 80008f4:	487c      	ldr	r0, [pc, #496]	; (8000ae8 <main+0x314>)
 80008f6:	f7ff fc8b 	bl	8000210 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	2314      	movs	r3, #20
 8000900:	4979      	ldr	r1, [pc, #484]	; (8000ae8 <main+0x314>)
 8000902:	487a      	ldr	r0, [pc, #488]	; (8000aec <main+0x318>)
 8000904:	f002 faa7 	bl	8002e56 <HAL_UART_Transmit>
  HAL_Delay(1100);
 8000908:	f240 404c 	movw	r0, #1100	; 0x44c
 800090c:	f000 fcf8 	bl	8001300 <HAL_Delay>
  increase_motor_speed(&left_motor);
 8000910:	463b      	mov	r3, r7
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fe94 	bl	8000640 <increase_motor_speed>
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091e:	461a      	mov	r2, r3
  		  (int)left_motor.direction_of_rotation_flag);
 8000920:	7d7b      	ldrb	r3, [r7, #21]
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000922:	4970      	ldr	r1, [pc, #448]	; (8000ae4 <main+0x310>)
 8000924:	4870      	ldr	r0, [pc, #448]	; (8000ae8 <main+0x314>)
 8000926:	f002 fd91 	bl	800344c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 800092a:	486f      	ldr	r0, [pc, #444]	; (8000ae8 <main+0x314>)
 800092c:	f7ff fc70 	bl	8000210 <strlen>
 8000930:	4603      	mov	r3, r0
 8000932:	b29a      	uxth	r2, r3
 8000934:	2314      	movs	r3, #20
 8000936:	496c      	ldr	r1, [pc, #432]	; (8000ae8 <main+0x314>)
 8000938:	486c      	ldr	r0, [pc, #432]	; (8000aec <main+0x318>)
 800093a:	f002 fa8c 	bl	8002e56 <HAL_UART_Transmit>
  HAL_Delay(1100);
 800093e:	f240 404c 	movw	r0, #1100	; 0x44c
 8000942:	f000 fcdd 	bl	8001300 <HAL_Delay>
  increase_motor_speed(&left_motor);
 8000946:	463b      	mov	r3, r7
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fe79 	bl	8000640 <increase_motor_speed>
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000954:	461a      	mov	r2, r3
  		  (int)left_motor.direction_of_rotation_flag);
 8000956:	7d7b      	ldrb	r3, [r7, #21]
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000958:	4962      	ldr	r1, [pc, #392]	; (8000ae4 <main+0x310>)
 800095a:	4863      	ldr	r0, [pc, #396]	; (8000ae8 <main+0x314>)
 800095c:	f002 fd76 	bl	800344c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 8000960:	4861      	ldr	r0, [pc, #388]	; (8000ae8 <main+0x314>)
 8000962:	f7ff fc55 	bl	8000210 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	b29a      	uxth	r2, r3
 800096a:	2314      	movs	r3, #20
 800096c:	495e      	ldr	r1, [pc, #376]	; (8000ae8 <main+0x314>)
 800096e:	485f      	ldr	r0, [pc, #380]	; (8000aec <main+0x318>)
 8000970:	f002 fa71 	bl	8002e56 <HAL_UART_Transmit>
  HAL_Delay(200);
 8000974:	20c8      	movs	r0, #200	; 0xc8
 8000976:	f000 fcc3 	bl	8001300 <HAL_Delay>
  increase_motor_speed(&left_motor);
 800097a:	463b      	mov	r3, r7
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fe5f 	bl	8000640 <increase_motor_speed>
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000988:	461a      	mov	r2, r3
  		  (int)left_motor.direction_of_rotation_flag);
 800098a:	7d7b      	ldrb	r3, [r7, #21]
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 800098c:	4955      	ldr	r1, [pc, #340]	; (8000ae4 <main+0x310>)
 800098e:	4856      	ldr	r0, [pc, #344]	; (8000ae8 <main+0x314>)
 8000990:	f002 fd5c 	bl	800344c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 8000994:	4854      	ldr	r0, [pc, #336]	; (8000ae8 <main+0x314>)
 8000996:	f7ff fc3b 	bl	8000210 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	b29a      	uxth	r2, r3
 800099e:	2314      	movs	r3, #20
 80009a0:	4951      	ldr	r1, [pc, #324]	; (8000ae8 <main+0x314>)
 80009a2:	4852      	ldr	r0, [pc, #328]	; (8000aec <main+0x318>)
 80009a4:	f002 fa57 	bl	8002e56 <HAL_UART_Transmit>
  HAL_Delay(200);
 80009a8:	20c8      	movs	r0, #200	; 0xc8
 80009aa:	f000 fca9 	bl	8001300 <HAL_Delay>
  increase_motor_speed(&left_motor);
 80009ae:	463b      	mov	r3, r7
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fe45 	bl	8000640 <increase_motor_speed>
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009bc:	461a      	mov	r2, r3
  		  (int)left_motor.direction_of_rotation_flag);
 80009be:	7d7b      	ldrb	r3, [r7, #21]
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 80009c0:	4948      	ldr	r1, [pc, #288]	; (8000ae4 <main+0x310>)
 80009c2:	4849      	ldr	r0, [pc, #292]	; (8000ae8 <main+0x314>)
 80009c4:	f002 fd42 	bl	800344c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 80009c8:	4847      	ldr	r0, [pc, #284]	; (8000ae8 <main+0x314>)
 80009ca:	f7ff fc21 	bl	8000210 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	2314      	movs	r3, #20
 80009d4:	4944      	ldr	r1, [pc, #272]	; (8000ae8 <main+0x314>)
 80009d6:	4845      	ldr	r0, [pc, #276]	; (8000aec <main+0x318>)
 80009d8:	f002 fa3d 	bl	8002e56 <HAL_UART_Transmit>
  HAL_Delay(200);
 80009dc:	20c8      	movs	r0, #200	; 0xc8
 80009de:	f000 fc8f 	bl	8001300 <HAL_Delay>
  increase_motor_speed(&left_motor);
 80009e2:	463b      	mov	r3, r7
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fe2b 	bl	8000640 <increase_motor_speed>
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f0:	461a      	mov	r2, r3
  		  (int)left_motor.direction_of_rotation_flag);
 80009f2:	7d7b      	ldrb	r3, [r7, #21]
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 80009f4:	493b      	ldr	r1, [pc, #236]	; (8000ae4 <main+0x310>)
 80009f6:	483c      	ldr	r0, [pc, #240]	; (8000ae8 <main+0x314>)
 80009f8:	f002 fd28 	bl	800344c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 80009fc:	483a      	ldr	r0, [pc, #232]	; (8000ae8 <main+0x314>)
 80009fe:	f7ff fc07 	bl	8000210 <strlen>
 8000a02:	4603      	mov	r3, r0
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	2314      	movs	r3, #20
 8000a08:	4937      	ldr	r1, [pc, #220]	; (8000ae8 <main+0x314>)
 8000a0a:	4838      	ldr	r0, [pc, #224]	; (8000aec <main+0x318>)
 8000a0c:	f002 fa23 	bl	8002e56 <HAL_UART_Transmit>
  HAL_Delay(200);
 8000a10:	20c8      	movs	r0, #200	; 0xc8
 8000a12:	f000 fc75 	bl	8001300 <HAL_Delay>
  increase_motor_speed(&left_motor);
 8000a16:	463b      	mov	r3, r7
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fe11 	bl	8000640 <increase_motor_speed>
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a24:	461a      	mov	r2, r3
  		  (int)left_motor.direction_of_rotation_flag);
 8000a26:	7d7b      	ldrb	r3, [r7, #21]
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000a28:	492e      	ldr	r1, [pc, #184]	; (8000ae4 <main+0x310>)
 8000a2a:	482f      	ldr	r0, [pc, #188]	; (8000ae8 <main+0x314>)
 8000a2c:	f002 fd0e 	bl	800344c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 8000a30:	482d      	ldr	r0, [pc, #180]	; (8000ae8 <main+0x314>)
 8000a32:	f7ff fbed 	bl	8000210 <strlen>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	2314      	movs	r3, #20
 8000a3c:	492a      	ldr	r1, [pc, #168]	; (8000ae8 <main+0x314>)
 8000a3e:	482b      	ldr	r0, [pc, #172]	; (8000aec <main+0x318>)
 8000a40:	f002 fa09 	bl	8002e56 <HAL_UART_Transmit>
  HAL_Delay(200);
 8000a44:	20c8      	movs	r0, #200	; 0xc8
 8000a46:	f000 fc5b 	bl	8001300 <HAL_Delay>
  increase_motor_speed(&left_motor);
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fdf7 	bl	8000640 <increase_motor_speed>
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a58:	461a      	mov	r2, r3
  		  (int)left_motor.direction_of_rotation_flag);
 8000a5a:	7d7b      	ldrb	r3, [r7, #21]
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000a5c:	4921      	ldr	r1, [pc, #132]	; (8000ae4 <main+0x310>)
 8000a5e:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <main+0x314>)
 8000a60:	f002 fcf4 	bl	800344c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 8000a64:	4820      	ldr	r0, [pc, #128]	; (8000ae8 <main+0x314>)
 8000a66:	f7ff fbd3 	bl	8000210 <strlen>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	2314      	movs	r3, #20
 8000a70:	491d      	ldr	r1, [pc, #116]	; (8000ae8 <main+0x314>)
 8000a72:	481e      	ldr	r0, [pc, #120]	; (8000aec <main+0x318>)
 8000a74:	f002 f9ef 	bl	8002e56 <HAL_UART_Transmit>
  HAL_Delay(200);
 8000a78:	20c8      	movs	r0, #200	; 0xc8
 8000a7a:	f000 fc41 	bl	8001300 <HAL_Delay>
  increase_motor_speed(&left_motor);
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fddd 	bl	8000640 <increase_motor_speed>
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8c:	461a      	mov	r2, r3
  		  (int)left_motor.direction_of_rotation_flag);
 8000a8e:	7d7b      	ldrb	r3, [r7, #21]
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000a90:	4914      	ldr	r1, [pc, #80]	; (8000ae4 <main+0x310>)
 8000a92:	4815      	ldr	r0, [pc, #84]	; (8000ae8 <main+0x314>)
 8000a94:	f002 fcda 	bl	800344c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 8000a98:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <main+0x314>)
 8000a9a:	f7ff fbb9 	bl	8000210 <strlen>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	2314      	movs	r3, #20
 8000aa4:	4910      	ldr	r1, [pc, #64]	; (8000ae8 <main+0x314>)
 8000aa6:	4811      	ldr	r0, [pc, #68]	; (8000aec <main+0x318>)
 8000aa8:	f002 f9d5 	bl	8002e56 <HAL_UART_Transmit>
  HAL_Delay(200);
 8000aac:	20c8      	movs	r0, #200	; 0xc8
 8000aae:	f000 fc27 	bl	8001300 <HAL_Delay>
  increase_motor_speed(&left_motor);
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fdc3 	bl	8000640 <increase_motor_speed>
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac0:	461a      	mov	r2, r3
  		  (int)left_motor.direction_of_rotation_flag);
 8000ac2:	7d7b      	ldrb	r3, [r7, #21]
  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000ac4:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <main+0x310>)
 8000ac6:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <main+0x314>)
 8000ac8:	f002 fcc0 	bl	800344c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 8000acc:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <main+0x314>)
 8000ace:	f7ff fb9f 	bl	8000210 <strlen>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	2314      	movs	r3, #20
 8000ad8:	4903      	ldr	r1, [pc, #12]	; (8000ae8 <main+0x314>)
 8000ada:	e009      	b.n	8000af0 <main+0x31c>
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	200000d4 	.word	0x200000d4
 8000ae4:	08003cc0 	.word	0x08003cc0
 8000ae8:	20000098 	.word	0x20000098
 8000aec:	20000164 	.word	0x20000164
 8000af0:	481f      	ldr	r0, [pc, #124]	; (8000b70 <main+0x39c>)
 8000af2:	f002 f9b0 	bl	8002e56 <HAL_UART_Transmit>
  HAL_Delay(200);
 8000af6:	20c8      	movs	r0, #200	; 0xc8
 8000af8:	f000 fc02 	bl	8001300 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  select_motor_rotation_direction(&left_motor, MOTOR_ROTATION_CLOCKWISE);
 8000afc:	463b      	mov	r3, r7
 8000afe:	2101      	movs	r1, #1
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fe11 	bl	8000728 <select_motor_rotation_direction>
	  HAL_Delay(3000);
 8000b06:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b0a:	f000 fbf9 	bl	8001300 <HAL_Delay>

	  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b14:	461a      	mov	r2, r3
	    		  (int)left_motor.direction_of_rotation_flag);
 8000b16:	7d7b      	ldrb	r3, [r7, #21]
	  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000b18:	4916      	ldr	r1, [pc, #88]	; (8000b74 <main+0x3a0>)
 8000b1a:	4817      	ldr	r0, [pc, #92]	; (8000b78 <main+0x3a4>)
 8000b1c:	f002 fc96 	bl	800344c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 8000b20:	4815      	ldr	r0, [pc, #84]	; (8000b78 <main+0x3a4>)
 8000b22:	f7ff fb75 	bl	8000210 <strlen>
 8000b26:	4603      	mov	r3, r0
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	2314      	movs	r3, #20
 8000b2c:	4912      	ldr	r1, [pc, #72]	; (8000b78 <main+0x3a4>)
 8000b2e:	4810      	ldr	r0, [pc, #64]	; (8000b70 <main+0x39c>)
 8000b30:	f002 f991 	bl	8002e56 <HAL_UART_Transmit>

	  select_motor_rotation_direction(&left_motor, MOTOR_ROTATION_COUNTERCLOCKWISE);
 8000b34:	463b      	mov	r3, r7
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fdf5 	bl	8000728 <select_motor_rotation_direction>
	  HAL_Delay(3000);
 8000b3e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b42:	f000 fbdd 	bl	8001300 <HAL_Delay>

	  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4c:	461a      	mov	r2, r3
	    		  (int)left_motor.direction_of_rotation_flag);
 8000b4e:	7d7b      	ldrb	r3, [r7, #21]
	  sprintf(message, "Pulse: %d, dir: %d \n\r", (int)left_motor.htimer->Instance->CCR1,
 8000b50:	4908      	ldr	r1, [pc, #32]	; (8000b74 <main+0x3a0>)
 8000b52:	4809      	ldr	r0, [pc, #36]	; (8000b78 <main+0x3a4>)
 8000b54:	f002 fc7a 	bl	800344c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 8000b58:	4807      	ldr	r0, [pc, #28]	; (8000b78 <main+0x3a4>)
 8000b5a:	f7ff fb59 	bl	8000210 <strlen>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	2314      	movs	r3, #20
 8000b64:	4904      	ldr	r1, [pc, #16]	; (8000b78 <main+0x3a4>)
 8000b66:	4802      	ldr	r0, [pc, #8]	; (8000b70 <main+0x39c>)
 8000b68:	f002 f975 	bl	8002e56 <HAL_UART_Transmit>
	  select_motor_rotation_direction(&left_motor, MOTOR_ROTATION_CLOCKWISE);
 8000b6c:	e7c6      	b.n	8000afc <main+0x328>
 8000b6e:	bf00      	nop
 8000b70:	20000164 	.word	0x20000164
 8000b74:	08003cc0 	.word	0x08003cc0
 8000b78:	20000098 	.word	0x20000098

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b094      	sub	sp, #80	; 0x50
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	2234      	movs	r2, #52	; 0x34
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fc56 	bl	800343c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <SystemClock_Config+0xd4>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a29      	ldr	r2, [pc, #164]	; (8000c50 <SystemClock_Config+0xd4>)
 8000baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <SystemClock_Config+0xd4>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <SystemClock_Config+0xd8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bc8:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <SystemClock_Config+0xd8>)
 8000bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <SystemClock_Config+0xd8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be4:	2310      	movs	r3, #16
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be8:	2302      	movs	r3, #2
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bf4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bf8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 f8fc 	bl	8001e08 <HAL_RCC_OscConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c16:	f000 f95f 	bl	8000ed8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	2102      	movs	r1, #2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fe1a 	bl	8001870 <HAL_RCC_ClockConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c42:	f000 f949 	bl	8000ed8 <Error_Handler>
  }
}
 8000c46:	bf00      	nop
 8000c48:	3750      	adds	r7, #80	; 0x50
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40007000 	.word	0x40007000

08000c58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]
 8000c76:	615a      	str	r2, [r3, #20]
 8000c78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c7a:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <MX_TIM3_Init+0xc8>)
 8000c7c:	4a29      	ldr	r2, [pc, #164]	; (8000d24 <MX_TIM3_Init+0xcc>)
 8000c7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <MX_TIM3_Init+0xc8>)
 8000c82:	2207      	movs	r2, #7
 8000c84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <MX_TIM3_Init+0xc8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 420;
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_TIM3_Init+0xc8>)
 8000c8e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000c92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c94:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <MX_TIM3_Init+0xc8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_TIM3_Init+0xc8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ca0:	481f      	ldr	r0, [pc, #124]	; (8000d20 <MX_TIM3_Init+0xc8>)
 8000ca2:	f001 fb4f 	bl	8002344 <HAL_TIM_PWM_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000cac:	f000 f914 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cb8:	f107 0320 	add.w	r3, r7, #32
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4818      	ldr	r0, [pc, #96]	; (8000d20 <MX_TIM3_Init+0xc8>)
 8000cc0:	f002 f800 	bl	8002cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000cca:	f000 f905 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cce:	2360      	movs	r3, #96	; 0x60
 8000cd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 300;
 8000cd2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000cd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480e      	ldr	r0, [pc, #56]	; (8000d20 <MX_TIM3_Init+0xc8>)
 8000ce8:	f001 fcb4 	bl	8002654 <HAL_TIM_PWM_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000cf2:	f000 f8f1 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.Pulse = 330;
 8000cf6:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8000cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2204      	movs	r2, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4807      	ldr	r0, [pc, #28]	; (8000d20 <MX_TIM3_Init+0xc8>)
 8000d04:	f001 fca6 	bl	8002654 <HAL_TIM_PWM_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000d0e:	f000 f8e3 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d12:	4803      	ldr	r0, [pc, #12]	; (8000d20 <MX_TIM3_Init+0xc8>)
 8000d14:	f000 f930 	bl	8000f78 <HAL_TIM_MspPostInit>

}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	; 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000d4 	.word	0x200000d4
 8000d24:	40000400 	.word	0x40000400

08000d28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <MX_USART1_UART_Init+0x50>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d60:	f002 f82c 	bl	8002dbc <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d6a:	f000 f8b5 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000011c 	.word	0x2000011c
 8000d78:	40011000 	.word	0x40011000

08000d7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <MX_USART2_UART_Init+0x50>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000db4:	f002 f802 	bl	8002dbc <HAL_UART_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dbe:	f000 f88b 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000164 	.word	0x20000164
 8000dcc:	40004400 	.word	0x40004400

08000dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b37      	ldr	r3, [pc, #220]	; (8000ec8 <MX_GPIO_Init+0xf8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a36      	ldr	r2, [pc, #216]	; (8000ec8 <MX_GPIO_Init+0xf8>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <MX_GPIO_Init+0xf8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <MX_GPIO_Init+0xf8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <MX_GPIO_Init+0xf8>)
 8000e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <MX_GPIO_Init+0xf8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <MX_GPIO_Init+0xf8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a28      	ldr	r2, [pc, #160]	; (8000ec8 <MX_GPIO_Init+0xf8>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <MX_GPIO_Init+0xf8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <MX_GPIO_Init+0xf8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <MX_GPIO_Init+0xf8>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <MX_GPIO_Init+0xf8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2120      	movs	r1, #32
 8000e5a:	481c      	ldr	r0, [pc, #112]	; (8000ecc <MX_GPIO_Init+0xfc>)
 8000e5c:	f000 fcee 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR1_CLOCKWISE_EN_PIN_Pin|MOTOR1_COUNTERCLOCKWISE_EN_PIN_Pin, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2106      	movs	r1, #6
 8000e64:	481a      	ldr	r0, [pc, #104]	; (8000ed0 <MX_GPIO_Init+0x100>)
 8000e66:	f000 fce9 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e70:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4814      	ldr	r0, [pc, #80]	; (8000ed4 <MX_GPIO_Init+0x104>)
 8000e82:	f000 fb47 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e86:	2320      	movs	r3, #32
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480b      	ldr	r0, [pc, #44]	; (8000ecc <MX_GPIO_Init+0xfc>)
 8000e9e:	f000 fb39 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR1_CLOCKWISE_EN_PIN_Pin MOTOR1_COUNTERCLOCKWISE_EN_PIN_Pin */
  GPIO_InitStruct.Pin = MOTOR1_CLOCKWISE_EN_PIN_Pin|MOTOR1_COUNTERCLOCKWISE_EN_PIN_Pin;
 8000ea2:	2306      	movs	r3, #6
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_GPIO_Init+0x100>)
 8000eba:	f000 fb2b 	bl	8001514 <HAL_GPIO_Init>

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020800 	.word	0x40020800

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <Error_Handler+0x8>
	...

08000ee4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <HAL_MspInit+0x4c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <HAL_MspInit+0x4c>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f22:	2007      	movs	r0, #7
 8000f24:	f000 fac2 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10d      	bne.n	8000f62 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_TIM_PWM_MspInit+0x40>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <HAL_TIM_PWM_MspInit+0x40>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <HAL_TIM_PWM_MspInit+0x40>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40000400 	.word	0x40000400
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <HAL_TIM_MspPostInit+0x68>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d11d      	bne.n	8000fd6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_TIM_MspPostInit+0x6c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <HAL_TIM_MspPostInit+0x6c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_TIM_MspPostInit+0x6c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fb6:	23c0      	movs	r3, #192	; 0xc0
 8000fb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <HAL_TIM_MspPostInit+0x70>)
 8000fd2:	f000 fa9f 	bl	8001514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40000400 	.word	0x40000400
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020000 	.word	0x40020000

08000fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <HAL_UART_MspInit+0xe8>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d12d      	bne.n	800106a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
 8001012:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a30      	ldr	r2, [pc, #192]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001018:	f043 0310 	orr.w	r3, r3, #16
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f003 0310 	and.w	r3, r3, #16
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a29      	ldr	r2, [pc, #164]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <HAL_UART_MspInit+0xec>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001046:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001058:	2307      	movs	r3, #7
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	481e      	ldr	r0, [pc, #120]	; (80010dc <HAL_UART_MspInit+0xf0>)
 8001064:	f000 fa56 	bl	8001514 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001068:	e030      	b.n	80010cc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <HAL_UART_MspInit+0xf4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d12b      	bne.n	80010cc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_UART_MspInit+0xec>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <HAL_UART_MspInit+0xec>)
 800107e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <HAL_UART_MspInit+0xec>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6313      	str	r3, [r2, #48]	; 0x30
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_UART_MspInit+0xec>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010ac:	230c      	movs	r3, #12
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010bc:	2307      	movs	r3, #7
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <HAL_UART_MspInit+0xf0>)
 80010c8:	f000 fa24 	bl	8001514 <HAL_GPIO_Init>
}
 80010cc:	bf00      	nop
 80010ce:	3730      	adds	r7, #48	; 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40011000 	.word	0x40011000
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40004400 	.word	0x40004400

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f000 f8c6 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f002 f93e 	bl	80033e8 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20020000 	.word	0x20020000
 8001198:	00000400 	.word	0x00000400
 800119c:	2000008c 	.word	0x2000008c
 80011a0:	200001c0 	.word	0x200001c0

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011f2:	f7ff ffd7 	bl	80011a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f002 f8fd 	bl	80033f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff faeb 	bl	80007d4 <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800120c:	08003d34 	.word	0x08003d34
  ldr r2, =_sbss
 8001210:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001214:	200001bc 	.word	0x200001bc

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f931 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fe48 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f93b 	bl	80014fa <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f911 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008
 80012e4:	200001a8 	.word	0x200001a8

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200001a8 	.word	0x200001a8

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff47 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff5c 	bl	8001390 <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff8e 	bl	8001400 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5d 	bl	80013ac <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ffb0 	bl	8001468 <SysTick_Config>
 8001508:	4603      	mov	r3, r0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	e165      	b.n	80017fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	429a      	cmp	r2, r3
 800154a:	f040 8154 	bne.w	80017f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d005      	beq.n	8001566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	2b02      	cmp	r3, #2
 8001564:	d130      	bne.n	80015c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0201 	and.w	r2, r3, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d017      	beq.n	8001604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d123      	bne.n	8001658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0203 	and.w	r2, r3, #3
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80ae 	beq.w	80017f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <HAL_GPIO_Init+0x300>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a5c      	ldr	r2, [pc, #368]	; (8001814 <HAL_GPIO_Init+0x300>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b5a      	ldr	r3, [pc, #360]	; (8001814 <HAL_GPIO_Init+0x300>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b6:	4a58      	ldr	r2, [pc, #352]	; (8001818 <HAL_GPIO_Init+0x304>)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4f      	ldr	r2, [pc, #316]	; (800181c <HAL_GPIO_Init+0x308>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d025      	beq.n	800172e <HAL_GPIO_Init+0x21a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4e      	ldr	r2, [pc, #312]	; (8001820 <HAL_GPIO_Init+0x30c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d01f      	beq.n	800172a <HAL_GPIO_Init+0x216>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4d      	ldr	r2, [pc, #308]	; (8001824 <HAL_GPIO_Init+0x310>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d019      	beq.n	8001726 <HAL_GPIO_Init+0x212>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4c      	ldr	r2, [pc, #304]	; (8001828 <HAL_GPIO_Init+0x314>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d013      	beq.n	8001722 <HAL_GPIO_Init+0x20e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4b      	ldr	r2, [pc, #300]	; (800182c <HAL_GPIO_Init+0x318>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d00d      	beq.n	800171e <HAL_GPIO_Init+0x20a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4a      	ldr	r2, [pc, #296]	; (8001830 <HAL_GPIO_Init+0x31c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d007      	beq.n	800171a <HAL_GPIO_Init+0x206>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a49      	ldr	r2, [pc, #292]	; (8001834 <HAL_GPIO_Init+0x320>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_GPIO_Init+0x202>
 8001712:	2306      	movs	r3, #6
 8001714:	e00c      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 8001716:	2307      	movs	r3, #7
 8001718:	e00a      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800171a:	2305      	movs	r3, #5
 800171c:	e008      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800171e:	2304      	movs	r3, #4
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 8001722:	2303      	movs	r3, #3
 8001724:	e004      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 8001726:	2302      	movs	r3, #2
 8001728:	e002      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800172e:	2300      	movs	r3, #0
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f002 0203 	and.w	r2, r2, #3
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	4093      	lsls	r3, r2
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001740:	4935      	ldr	r1, [pc, #212]	; (8001818 <HAL_GPIO_Init+0x304>)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800174e:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <HAL_GPIO_Init+0x324>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001772:	4a31      	ldr	r2, [pc, #196]	; (8001838 <HAL_GPIO_Init+0x324>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001778:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <HAL_GPIO_Init+0x324>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800179c:	4a26      	ldr	r2, [pc, #152]	; (8001838 <HAL_GPIO_Init+0x324>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <HAL_GPIO_Init+0x324>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <HAL_GPIO_Init+0x324>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_GPIO_Init+0x324>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f0:	4a11      	ldr	r2, [pc, #68]	; (8001838 <HAL_GPIO_Init+0x324>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	f67f ae96 	bls.w	8001530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3724      	adds	r7, #36	; 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40013800 	.word	0x40013800
 800181c:	40020000 	.word	0x40020000
 8001820:	40020400 	.word	0x40020400
 8001824:	40020800 	.word	0x40020800
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40021000 	.word	0x40021000
 8001830:	40021400 	.word	0x40021400
 8001834:	40021800 	.word	0x40021800
 8001838:	40013c00 	.word	0x40013c00

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0cc      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d90c      	bls.n	80018ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b65      	ldr	r3, [pc, #404]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0b8      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c4:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a58      	ldr	r2, [pc, #352]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a52      	ldr	r2, [pc, #328]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e8:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	494d      	ldr	r1, [pc, #308]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d044      	beq.n	8001990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d119      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e07f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d003      	beq.n	800192e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192a:	2b03      	cmp	r3, #3
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e06f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e067      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194e:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f023 0203 	bic.w	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4934      	ldr	r1, [pc, #208]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001960:	f7ff fcc2 	bl	80012e8 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	e00a      	b.n	800197e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff fcbe 	bl	80012e8 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e04f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 020c 	and.w	r2, r3, #12
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	429a      	cmp	r2, r3
 800198e:	d1eb      	bne.n	8001968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 030f 	and.w	r3, r3, #15
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d20c      	bcs.n	80019b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e032      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4916      	ldr	r1, [pc, #88]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	490e      	ldr	r1, [pc, #56]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019f6:	f000 f855 	bl	8001aa4 <HAL_RCC_GetSysClockFreq>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	490a      	ldr	r1, [pc, #40]	; (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	5ccb      	ldrb	r3, [r1, r3]
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fc22 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	08003cd8 	.word	0x08003cd8
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000000 	.word	0x20000000

08001a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a58:	f7ff fff0 	bl	8001a3c <HAL_RCC_GetHCLKFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	0a9b      	lsrs	r3, r3, #10
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4903      	ldr	r1, [pc, #12]	; (8001a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	08003ce8 	.word	0x08003ce8

08001a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a80:	f7ff ffdc 	bl	8001a3c <HAL_RCC_GetHCLKFreq>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	0b5b      	lsrs	r3, r3, #13
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	4903      	ldr	r1, [pc, #12]	; (8001aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a92:	5ccb      	ldrb	r3, [r1, r3]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	08003ce8 	.word	0x08003ce8

08001aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa8:	b088      	sub	sp, #32
 8001aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac0:	4bce      	ldr	r3, [pc, #824]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x358>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	f200 818d 	bhi.w	8001de8 <HAL_RCC_GetSysClockFreq+0x344>
 8001ace:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <HAL_RCC_GetSysClockFreq+0x30>)
 8001ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad4:	08001b09 	.word	0x08001b09
 8001ad8:	08001de9 	.word	0x08001de9
 8001adc:	08001de9 	.word	0x08001de9
 8001ae0:	08001de9 	.word	0x08001de9
 8001ae4:	08001b0f 	.word	0x08001b0f
 8001ae8:	08001de9 	.word	0x08001de9
 8001aec:	08001de9 	.word	0x08001de9
 8001af0:	08001de9 	.word	0x08001de9
 8001af4:	08001b15 	.word	0x08001b15
 8001af8:	08001de9 	.word	0x08001de9
 8001afc:	08001de9 	.word	0x08001de9
 8001b00:	08001de9 	.word	0x08001de9
 8001b04:	08001c89 	.word	0x08001c89
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4bbd      	ldr	r3, [pc, #756]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b0a:	61bb      	str	r3, [r7, #24]
       break;
 8001b0c:	e16f      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b0e:	4bbd      	ldr	r3, [pc, #756]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x360>)
 8001b10:	61bb      	str	r3, [r7, #24]
      break;
 8001b12:	e16c      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b14:	4bb9      	ldr	r3, [pc, #740]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x358>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b1c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b1e:	4bb7      	ldr	r3, [pc, #732]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x358>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d053      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2a:	4bb4      	ldr	r3, [pc, #720]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x358>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	099b      	lsrs	r3, r3, #6
 8001b30:	461a      	mov	r2, r3
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b3a:	f04f 0100 	mov.w	r1, #0
 8001b3e:	ea02 0400 	and.w	r4, r2, r0
 8001b42:	603c      	str	r4, [r7, #0]
 8001b44:	400b      	ands	r3, r1
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	4629      	mov	r1, r5
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	014b      	lsls	r3, r1, #5
 8001b5a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b5e:	0142      	lsls	r2, r0, #5
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	4623      	mov	r3, r4
 8001b66:	1ac0      	subs	r0, r0, r3
 8001b68:	462b      	mov	r3, r5
 8001b6a:	eb61 0103 	sbc.w	r1, r1, r3
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	018b      	lsls	r3, r1, #6
 8001b78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b7c:	0182      	lsls	r2, r0, #6
 8001b7e:	1a12      	subs	r2, r2, r0
 8001b80:	eb63 0301 	sbc.w	r3, r3, r1
 8001b84:	f04f 0000 	mov.w	r0, #0
 8001b88:	f04f 0100 	mov.w	r1, #0
 8001b8c:	00d9      	lsls	r1, r3, #3
 8001b8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b92:	00d0      	lsls	r0, r2, #3
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4621      	mov	r1, r4
 8001b9a:	1852      	adds	r2, r2, r1
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	eb43 0101 	adc.w	r1, r3, r1
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	f04f 0000 	mov.w	r0, #0
 8001ba8:	f04f 0100 	mov.w	r1, #0
 8001bac:	0259      	lsls	r1, r3, #9
 8001bae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001bb2:	0250      	lsls	r0, r2, #9
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	f7fe fb7c 	bl	80002c0 <__aeabi_uldivmod>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	e04c      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd2:	4b8a      	ldr	r3, [pc, #552]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x358>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	099b      	lsrs	r3, r3, #6
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	ea02 0a00 	and.w	sl, r2, r0
 8001bea:	ea03 0b01 	and.w	fp, r3, r1
 8001bee:	4650      	mov	r0, sl
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	014b      	lsls	r3, r1, #5
 8001bfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c00:	0142      	lsls	r2, r0, #5
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	ebb0 000a 	subs.w	r0, r0, sl
 8001c0a:	eb61 010b 	sbc.w	r1, r1, fp
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	018b      	lsls	r3, r1, #6
 8001c18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c1c:	0182      	lsls	r2, r0, #6
 8001c1e:	1a12      	subs	r2, r2, r0
 8001c20:	eb63 0301 	sbc.w	r3, r3, r1
 8001c24:	f04f 0000 	mov.w	r0, #0
 8001c28:	f04f 0100 	mov.w	r1, #0
 8001c2c:	00d9      	lsls	r1, r3, #3
 8001c2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c32:	00d0      	lsls	r0, r2, #3
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	eb12 020a 	adds.w	r2, r2, sl
 8001c3c:	eb43 030b 	adc.w	r3, r3, fp
 8001c40:	f04f 0000 	mov.w	r0, #0
 8001c44:	f04f 0100 	mov.w	r1, #0
 8001c48:	0299      	lsls	r1, r3, #10
 8001c4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c4e:	0290      	lsls	r0, r2, #10
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	f7fe fb2e 	bl	80002c0 <__aeabi_uldivmod>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4613      	mov	r3, r2
 8001c6a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c6c:	4b63      	ldr	r3, [pc, #396]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x358>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	0c1b      	lsrs	r3, r3, #16
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	3301      	adds	r3, #1
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	61bb      	str	r3, [r7, #24]
      break;
 8001c86:	e0b2      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c88:	4b5c      	ldr	r3, [pc, #368]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x358>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c90:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c92:	4b5a      	ldr	r3, [pc, #360]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x358>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d04d      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9e:	4b57      	ldr	r3, [pc, #348]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x358>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	099b      	lsrs	r3, r3, #6
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cae:	f04f 0100 	mov.w	r1, #0
 8001cb2:	ea02 0800 	and.w	r8, r2, r0
 8001cb6:	ea03 0901 	and.w	r9, r3, r1
 8001cba:	4640      	mov	r0, r8
 8001cbc:	4649      	mov	r1, r9
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	014b      	lsls	r3, r1, #5
 8001cc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ccc:	0142      	lsls	r2, r0, #5
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	ebb0 0008 	subs.w	r0, r0, r8
 8001cd6:	eb61 0109 	sbc.w	r1, r1, r9
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	018b      	lsls	r3, r1, #6
 8001ce4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ce8:	0182      	lsls	r2, r0, #6
 8001cea:	1a12      	subs	r2, r2, r0
 8001cec:	eb63 0301 	sbc.w	r3, r3, r1
 8001cf0:	f04f 0000 	mov.w	r0, #0
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	00d9      	lsls	r1, r3, #3
 8001cfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cfe:	00d0      	lsls	r0, r2, #3
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	eb12 0208 	adds.w	r2, r2, r8
 8001d08:	eb43 0309 	adc.w	r3, r3, r9
 8001d0c:	f04f 0000 	mov.w	r0, #0
 8001d10:	f04f 0100 	mov.w	r1, #0
 8001d14:	0259      	lsls	r1, r3, #9
 8001d16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d1a:	0250      	lsls	r0, r2, #9
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	461a      	mov	r2, r3
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	f7fe fac8 	bl	80002c0 <__aeabi_uldivmod>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4613      	mov	r3, r2
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	e04a      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3a:	4b30      	ldr	r3, [pc, #192]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x358>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	099b      	lsrs	r3, r3, #6
 8001d40:	461a      	mov	r2, r3
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d4a:	f04f 0100 	mov.w	r1, #0
 8001d4e:	ea02 0400 	and.w	r4, r2, r0
 8001d52:	ea03 0501 	and.w	r5, r3, r1
 8001d56:	4620      	mov	r0, r4
 8001d58:	4629      	mov	r1, r5
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	014b      	lsls	r3, r1, #5
 8001d64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d68:	0142      	lsls	r2, r0, #5
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	1b00      	subs	r0, r0, r4
 8001d70:	eb61 0105 	sbc.w	r1, r1, r5
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	018b      	lsls	r3, r1, #6
 8001d7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d82:	0182      	lsls	r2, r0, #6
 8001d84:	1a12      	subs	r2, r2, r0
 8001d86:	eb63 0301 	sbc.w	r3, r3, r1
 8001d8a:	f04f 0000 	mov.w	r0, #0
 8001d8e:	f04f 0100 	mov.w	r1, #0
 8001d92:	00d9      	lsls	r1, r3, #3
 8001d94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d98:	00d0      	lsls	r0, r2, #3
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	1912      	adds	r2, r2, r4
 8001da0:	eb45 0303 	adc.w	r3, r5, r3
 8001da4:	f04f 0000 	mov.w	r0, #0
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	0299      	lsls	r1, r3, #10
 8001dae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001db2:	0290      	lsls	r0, r2, #10
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	f7fe fa7c 	bl	80002c0 <__aeabi_uldivmod>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4613      	mov	r3, r2
 8001dce:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x358>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	0f1b      	lsrs	r3, r3, #28
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	61bb      	str	r3, [r7, #24]
      break;
 8001de6:	e002      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001dea:	61bb      	str	r3, [r7, #24]
      break;
 8001dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dee:	69bb      	ldr	r3, [r7, #24]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	00f42400 	.word	0x00f42400
 8001e04:	007a1200 	.word	0x007a1200

08001e08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e28d      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8083 	beq.w	8001f2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e28:	4b94      	ldr	r3, [pc, #592]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d019      	beq.n	8001e68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e34:	4b91      	ldr	r3, [pc, #580]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e40:	4b8e      	ldr	r3, [pc, #568]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e4c:	d00c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4e:	4b8b      	ldr	r3, [pc, #556]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e56:	2b0c      	cmp	r3, #12
 8001e58:	d112      	bne.n	8001e80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e5a:	4b88      	ldr	r3, [pc, #544]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e66:	d10b      	bne.n	8001e80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	4b84      	ldr	r3, [pc, #528]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d05b      	beq.n	8001f2c <HAL_RCC_OscConfig+0x124>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d157      	bne.n	8001f2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e25a      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e88:	d106      	bne.n	8001e98 <HAL_RCC_OscConfig+0x90>
 8001e8a:	4b7c      	ldr	r3, [pc, #496]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a7b      	ldr	r2, [pc, #492]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e01d      	b.n	8001ed4 <HAL_RCC_OscConfig+0xcc>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0xb4>
 8001ea2:	4b76      	ldr	r3, [pc, #472]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a75      	ldr	r2, [pc, #468]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b73      	ldr	r3, [pc, #460]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a72      	ldr	r2, [pc, #456]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0xcc>
 8001ebc:	4b6f      	ldr	r3, [pc, #444]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6e      	ldr	r2, [pc, #440]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b6c      	ldr	r3, [pc, #432]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a6b      	ldr	r2, [pc, #428]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff fa04 	bl	80012e8 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fa00 	bl	80012e8 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e21f      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b61      	ldr	r3, [pc, #388]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xdc>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff f9f0 	bl	80012e8 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff f9ec 	bl	80012e8 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e20b      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	4b57      	ldr	r3, [pc, #348]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x104>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d06f      	beq.n	800201a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f3a:	4b50      	ldr	r3, [pc, #320]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d017      	beq.n	8001f76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f46:	4b4d      	ldr	r3, [pc, #308]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d105      	bne.n	8001f5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f52:	4b4a      	ldr	r3, [pc, #296]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5e:	4b47      	ldr	r3, [pc, #284]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d11c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6a:	4b44      	ldr	r3, [pc, #272]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d116      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	4b41      	ldr	r3, [pc, #260]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_RCC_OscConfig+0x186>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e1d3      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8e:	4b3b      	ldr	r3, [pc, #236]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4937      	ldr	r1, [pc, #220]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa2:	e03a      	b.n	800201a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fac:	4b34      	ldr	r3, [pc, #208]	; (8002080 <HAL_RCC_OscConfig+0x278>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7ff f999 	bl	80012e8 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fba:	f7ff f995 	bl	80012e8 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e1b4      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	4b2b      	ldr	r3, [pc, #172]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b28      	ldr	r3, [pc, #160]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4925      	ldr	r1, [pc, #148]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
 8001fec:	e015      	b.n	800201a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_RCC_OscConfig+0x278>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f978 	bl	80012e8 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7ff f974 	bl	80012e8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e193      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d036      	beq.n	8002094 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d016      	beq.n	800205c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_RCC_OscConfig+0x27c>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff f958 	bl	80012e8 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff f954 	bl	80012e8 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e173      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8002050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x234>
 800205a:	e01b      	b.n	8002094 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_RCC_OscConfig+0x27c>)
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002062:	f7ff f941 	bl	80012e8 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002068:	e00e      	b.n	8002088 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800206a:	f7ff f93d 	bl	80012e8 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d907      	bls.n	8002088 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e15c      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
 800207c:	40023800 	.word	0x40023800
 8002080:	42470000 	.word	0x42470000
 8002084:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002088:	4b8a      	ldr	r3, [pc, #552]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800208a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ea      	bne.n	800206a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 8097 	beq.w	80021d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a6:	4b83      	ldr	r3, [pc, #524]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10f      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b7f      	ldr	r3, [pc, #508]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a7e      	ldr	r2, [pc, #504]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b7c      	ldr	r3, [pc, #496]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4b79      	ldr	r3, [pc, #484]	; (80022b8 <HAL_RCC_OscConfig+0x4b0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d118      	bne.n	8002110 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020de:	4b76      	ldr	r3, [pc, #472]	; (80022b8 <HAL_RCC_OscConfig+0x4b0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a75      	ldr	r2, [pc, #468]	; (80022b8 <HAL_RCC_OscConfig+0x4b0>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ea:	f7ff f8fd 	bl	80012e8 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7ff f8f9 	bl	80012e8 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e118      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	4b6c      	ldr	r3, [pc, #432]	; (80022b8 <HAL_RCC_OscConfig+0x4b0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x31e>
 8002118:	4b66      	ldr	r3, [pc, #408]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211c:	4a65      	ldr	r2, [pc, #404]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6713      	str	r3, [r2, #112]	; 0x70
 8002124:	e01c      	b.n	8002160 <HAL_RCC_OscConfig+0x358>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b05      	cmp	r3, #5
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x340>
 800212e:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a60      	ldr	r2, [pc, #384]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
 800213a:	4b5e      	ldr	r3, [pc, #376]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	4a5d      	ldr	r2, [pc, #372]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6713      	str	r3, [r2, #112]	; 0x70
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0x358>
 8002148:	4b5a      	ldr	r3, [pc, #360]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214c:	4a59      	ldr	r2, [pc, #356]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800214e:	f023 0301 	bic.w	r3, r3, #1
 8002152:	6713      	str	r3, [r2, #112]	; 0x70
 8002154:	4b57      	ldr	r3, [pc, #348]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	4a56      	ldr	r2, [pc, #344]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800215a:	f023 0304 	bic.w	r3, r3, #4
 800215e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d015      	beq.n	8002194 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7ff f8be 	bl	80012e8 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216e:	e00a      	b.n	8002186 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7ff f8ba 	bl	80012e8 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	; 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0d7      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	4b4b      	ldr	r3, [pc, #300]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0ee      	beq.n	8002170 <HAL_RCC_OscConfig+0x368>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff f8a8 	bl	80012e8 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff f8a4 	bl	80012e8 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0c1      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b2:	4b40      	ldr	r3, [pc, #256]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1ee      	bne.n	800219c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021be:	7dfb      	ldrb	r3, [r7, #23]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d105      	bne.n	80021d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c4:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	4a3a      	ldr	r2, [pc, #232]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80021ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80ad 	beq.w	8002334 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021da:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d060      	beq.n	80022a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d145      	bne.n	800227a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b33      	ldr	r3, [pc, #204]	; (80022bc <HAL_RCC_OscConfig+0x4b4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff f878 	bl	80012e8 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fc:	f7ff f874 	bl	80012e8 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e093      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	019b      	lsls	r3, r3, #6
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	085b      	lsrs	r3, r3, #1
 8002232:	3b01      	subs	r3, #1
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	061b      	lsls	r3, r3, #24
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	071b      	lsls	r3, r3, #28
 8002246:	491b      	ldr	r1, [pc, #108]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <HAL_RCC_OscConfig+0x4b4>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7ff f849 	bl	80012e8 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff f845 	bl	80012e8 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e064      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x452>
 8002278:	e05c      	b.n	8002334 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_RCC_OscConfig+0x4b4>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7ff f832 	bl	80012e8 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002288:	f7ff f82e 	bl	80012e8 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e04d      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x480>
 80022a6:	e045      	b.n	8002334 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e040      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40007000 	.word	0x40007000
 80022bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022c0:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <HAL_RCC_OscConfig+0x538>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d030      	beq.n	8002330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d129      	bne.n	8002330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d122      	bne.n	8002330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022f0:	4013      	ands	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d119      	bne.n	8002330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	3b01      	subs	r3, #1
 800230a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d10f      	bne.n	8002330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d107      	bne.n	8002330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800

08002344 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e041      	b.n	80023da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fde2 	bl	8000f34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3304      	adds	r3, #4
 8002380:	4619      	mov	r1, r3
 8002382:	4610      	mov	r0, r2
 8002384:	f000 fa28 	bl	80027d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d109      	bne.n	8002408 <HAL_TIM_PWM_Start+0x24>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	bf14      	ite	ne
 8002400:	2301      	movne	r3, #1
 8002402:	2300      	moveq	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e022      	b.n	800244e <HAL_TIM_PWM_Start+0x6a>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2b04      	cmp	r3, #4
 800240c:	d109      	bne.n	8002422 <HAL_TIM_PWM_Start+0x3e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b01      	cmp	r3, #1
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	e015      	b.n	800244e <HAL_TIM_PWM_Start+0x6a>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b08      	cmp	r3, #8
 8002426:	d109      	bne.n	800243c <HAL_TIM_PWM_Start+0x58>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	e008      	b.n	800244e <HAL_TIM_PWM_Start+0x6a>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e07c      	b.n	8002550 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d104      	bne.n	8002466 <HAL_TIM_PWM_Start+0x82>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002464:	e013      	b.n	800248e <HAL_TIM_PWM_Start+0xaa>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b04      	cmp	r3, #4
 800246a:	d104      	bne.n	8002476 <HAL_TIM_PWM_Start+0x92>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002474:	e00b      	b.n	800248e <HAL_TIM_PWM_Start+0xaa>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d104      	bne.n	8002486 <HAL_TIM_PWM_Start+0xa2>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002484:	e003      	b.n	800248e <HAL_TIM_PWM_Start+0xaa>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2202      	movs	r2, #2
 800248a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2201      	movs	r2, #1
 8002494:	6839      	ldr	r1, [r7, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fbee 	bl	8002c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a2d      	ldr	r2, [pc, #180]	; (8002558 <HAL_TIM_PWM_Start+0x174>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d004      	beq.n	80024b0 <HAL_TIM_PWM_Start+0xcc>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a2c      	ldr	r2, [pc, #176]	; (800255c <HAL_TIM_PWM_Start+0x178>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d101      	bne.n	80024b4 <HAL_TIM_PWM_Start+0xd0>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_TIM_PWM_Start+0xd2>
 80024b4:	2300      	movs	r3, #0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a22      	ldr	r2, [pc, #136]	; (8002558 <HAL_TIM_PWM_Start+0x174>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d022      	beq.n	800251a <HAL_TIM_PWM_Start+0x136>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024dc:	d01d      	beq.n	800251a <HAL_TIM_PWM_Start+0x136>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1f      	ldr	r2, [pc, #124]	; (8002560 <HAL_TIM_PWM_Start+0x17c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d018      	beq.n	800251a <HAL_TIM_PWM_Start+0x136>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <HAL_TIM_PWM_Start+0x180>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_TIM_PWM_Start+0x136>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <HAL_TIM_PWM_Start+0x184>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d00e      	beq.n	800251a <HAL_TIM_PWM_Start+0x136>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a16      	ldr	r2, [pc, #88]	; (800255c <HAL_TIM_PWM_Start+0x178>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d009      	beq.n	800251a <HAL_TIM_PWM_Start+0x136>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a18      	ldr	r2, [pc, #96]	; (800256c <HAL_TIM_PWM_Start+0x188>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d004      	beq.n	800251a <HAL_TIM_PWM_Start+0x136>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a16      	ldr	r2, [pc, #88]	; (8002570 <HAL_TIM_PWM_Start+0x18c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d111      	bne.n	800253e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b06      	cmp	r3, #6
 800252a:	d010      	beq.n	800254e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253c:	e007      	b.n	800254e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0201 	orr.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40010000 	.word	0x40010000
 800255c:	40010400 	.word	0x40010400
 8002560:	40000400 	.word	0x40000400
 8002564:	40000800 	.word	0x40000800
 8002568:	40000c00 	.word	0x40000c00
 800256c:	40014000 	.word	0x40014000
 8002570:	40001800 	.word	0x40001800

08002574 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2200      	movs	r2, #0
 8002584:	6839      	ldr	r1, [r7, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fb76 	bl	8002c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2e      	ldr	r2, [pc, #184]	; (800264c <HAL_TIM_PWM_Stop+0xd8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d004      	beq.n	80025a0 <HAL_TIM_PWM_Stop+0x2c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a2d      	ldr	r2, [pc, #180]	; (8002650 <HAL_TIM_PWM_Stop+0xdc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d101      	bne.n	80025a4 <HAL_TIM_PWM_Stop+0x30>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_TIM_PWM_Stop+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d017      	beq.n	80025da <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a1a      	ldr	r2, [r3, #32]
 80025b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <HAL_TIM_PWM_Stop+0x66>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6a1a      	ldr	r2, [r3, #32]
 80025c0:	f240 4344 	movw	r3, #1092	; 0x444
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d107      	bne.n	80025da <HAL_TIM_PWM_Stop+0x66>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a1a      	ldr	r2, [r3, #32]
 80025e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10f      	bne.n	800260a <HAL_TIM_PWM_Stop+0x96>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6a1a      	ldr	r2, [r3, #32]
 80025f0:	f240 4344 	movw	r3, #1092	; 0x444
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d107      	bne.n	800260a <HAL_TIM_PWM_Stop+0x96>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d104      	bne.n	800261a <HAL_TIM_PWM_Stop+0xa6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002618:	e013      	b.n	8002642 <HAL_TIM_PWM_Stop+0xce>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b04      	cmp	r3, #4
 800261e:	d104      	bne.n	800262a <HAL_TIM_PWM_Stop+0xb6>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002628:	e00b      	b.n	8002642 <HAL_TIM_PWM_Stop+0xce>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d104      	bne.n	800263a <HAL_TIM_PWM_Stop+0xc6>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002638:	e003      	b.n	8002642 <HAL_TIM_PWM_Stop+0xce>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40010000 	.word	0x40010000
 8002650:	40010400 	.word	0x40010400

08002654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800266e:	2302      	movs	r3, #2
 8002670:	e0ae      	b.n	80027d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b0c      	cmp	r3, #12
 800267e:	f200 809f 	bhi.w	80027c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002682:	a201      	add	r2, pc, #4	; (adr r2, 8002688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002688:	080026bd 	.word	0x080026bd
 800268c:	080027c1 	.word	0x080027c1
 8002690:	080027c1 	.word	0x080027c1
 8002694:	080027c1 	.word	0x080027c1
 8002698:	080026fd 	.word	0x080026fd
 800269c:	080027c1 	.word	0x080027c1
 80026a0:	080027c1 	.word	0x080027c1
 80026a4:	080027c1 	.word	0x080027c1
 80026a8:	0800273f 	.word	0x0800273f
 80026ac:	080027c1 	.word	0x080027c1
 80026b0:	080027c1 	.word	0x080027c1
 80026b4:	080027c1 	.word	0x080027c1
 80026b8:	0800277f 	.word	0x0800277f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f928 	bl	8002918 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0208 	orr.w	r2, r2, #8
 80026d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0204 	bic.w	r2, r2, #4
 80026e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6999      	ldr	r1, [r3, #24]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	619a      	str	r2, [r3, #24]
      break;
 80026fa:	e064      	b.n	80027c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f978 	bl	80029f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6999      	ldr	r1, [r3, #24]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	021a      	lsls	r2, r3, #8
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	619a      	str	r2, [r3, #24]
      break;
 800273c:	e043      	b.n	80027c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68b9      	ldr	r1, [r7, #8]
 8002744:	4618      	mov	r0, r3
 8002746:	f000 f9cd 	bl	8002ae4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69da      	ldr	r2, [r3, #28]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0208 	orr.w	r2, r2, #8
 8002758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0204 	bic.w	r2, r2, #4
 8002768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69d9      	ldr	r1, [r3, #28]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	61da      	str	r2, [r3, #28]
      break;
 800277c:	e023      	b.n	80027c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fa21 	bl	8002bcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69d9      	ldr	r1, [r3, #28]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	021a      	lsls	r2, r3, #8
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	61da      	str	r2, [r3, #28]
      break;
 80027be:	e002      	b.n	80027c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	75fb      	strb	r3, [r7, #23]
      break;
 80027c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a40      	ldr	r2, [pc, #256]	; (80028ec <TIM_Base_SetConfig+0x114>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d013      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f6:	d00f      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a3d      	ldr	r2, [pc, #244]	; (80028f0 <TIM_Base_SetConfig+0x118>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00b      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a3c      	ldr	r2, [pc, #240]	; (80028f4 <TIM_Base_SetConfig+0x11c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d007      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a3b      	ldr	r2, [pc, #236]	; (80028f8 <TIM_Base_SetConfig+0x120>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d003      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3a      	ldr	r2, [pc, #232]	; (80028fc <TIM_Base_SetConfig+0x124>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d108      	bne.n	800282a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a2f      	ldr	r2, [pc, #188]	; (80028ec <TIM_Base_SetConfig+0x114>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d02b      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002838:	d027      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a2c      	ldr	r2, [pc, #176]	; (80028f0 <TIM_Base_SetConfig+0x118>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d023      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a2b      	ldr	r2, [pc, #172]	; (80028f4 <TIM_Base_SetConfig+0x11c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01f      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a2a      	ldr	r2, [pc, #168]	; (80028f8 <TIM_Base_SetConfig+0x120>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01b      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a29      	ldr	r2, [pc, #164]	; (80028fc <TIM_Base_SetConfig+0x124>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d017      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a28      	ldr	r2, [pc, #160]	; (8002900 <TIM_Base_SetConfig+0x128>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a27      	ldr	r2, [pc, #156]	; (8002904 <TIM_Base_SetConfig+0x12c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00f      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a26      	ldr	r2, [pc, #152]	; (8002908 <TIM_Base_SetConfig+0x130>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00b      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a25      	ldr	r2, [pc, #148]	; (800290c <TIM_Base_SetConfig+0x134>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d007      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a24      	ldr	r2, [pc, #144]	; (8002910 <TIM_Base_SetConfig+0x138>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d003      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a23      	ldr	r2, [pc, #140]	; (8002914 <TIM_Base_SetConfig+0x13c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d108      	bne.n	800289c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <TIM_Base_SetConfig+0x114>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d003      	beq.n	80028d0 <TIM_Base_SetConfig+0xf8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <TIM_Base_SetConfig+0x124>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d103      	bne.n	80028d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	615a      	str	r2, [r3, #20]
}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40010000 	.word	0x40010000
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40000800 	.word	0x40000800
 80028f8:	40000c00 	.word	0x40000c00
 80028fc:	40010400 	.word	0x40010400
 8002900:	40014000 	.word	0x40014000
 8002904:	40014400 	.word	0x40014400
 8002908:	40014800 	.word	0x40014800
 800290c:	40001800 	.word	0x40001800
 8002910:	40001c00 	.word	0x40001c00
 8002914:	40002000 	.word	0x40002000

08002918 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f023 0201 	bic.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0303 	bic.w	r3, r3, #3
 800294e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f023 0302 	bic.w	r3, r3, #2
 8002960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a20      	ldr	r2, [pc, #128]	; (80029f0 <TIM_OC1_SetConfig+0xd8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d003      	beq.n	800297c <TIM_OC1_SetConfig+0x64>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a1f      	ldr	r2, [pc, #124]	; (80029f4 <TIM_OC1_SetConfig+0xdc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d10c      	bne.n	8002996 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f023 0308 	bic.w	r3, r3, #8
 8002982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a15      	ldr	r2, [pc, #84]	; (80029f0 <TIM_OC1_SetConfig+0xd8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d003      	beq.n	80029a6 <TIM_OC1_SetConfig+0x8e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <TIM_OC1_SetConfig+0xdc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d111      	bne.n	80029ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	621a      	str	r2, [r3, #32]
}
 80029e4:	bf00      	nop
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40010400 	.word	0x40010400

080029f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f023 0210 	bic.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f023 0320 	bic.w	r3, r3, #32
 8002a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a22      	ldr	r2, [pc, #136]	; (8002adc <TIM_OC2_SetConfig+0xe4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d003      	beq.n	8002a60 <TIM_OC2_SetConfig+0x68>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a21      	ldr	r2, [pc, #132]	; (8002ae0 <TIM_OC2_SetConfig+0xe8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10d      	bne.n	8002a7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <TIM_OC2_SetConfig+0xe4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d003      	beq.n	8002a8c <TIM_OC2_SetConfig+0x94>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <TIM_OC2_SetConfig+0xe8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d113      	bne.n	8002ab4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	621a      	str	r2, [r3, #32]
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40010400 	.word	0x40010400

08002ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a21      	ldr	r2, [pc, #132]	; (8002bc4 <TIM_OC3_SetConfig+0xe0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d003      	beq.n	8002b4a <TIM_OC3_SetConfig+0x66>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a20      	ldr	r2, [pc, #128]	; (8002bc8 <TIM_OC3_SetConfig+0xe4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10d      	bne.n	8002b66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a16      	ldr	r2, [pc, #88]	; (8002bc4 <TIM_OC3_SetConfig+0xe0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d003      	beq.n	8002b76 <TIM_OC3_SetConfig+0x92>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <TIM_OC3_SetConfig+0xe4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d113      	bne.n	8002b9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	621a      	str	r2, [r3, #32]
}
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	40010400 	.word	0x40010400

08002bcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	031b      	lsls	r3, r3, #12
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <TIM_OC4_SetConfig+0xa4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <TIM_OC4_SetConfig+0x68>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a11      	ldr	r2, [pc, #68]	; (8002c74 <TIM_OC4_SetConfig+0xa8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d109      	bne.n	8002c48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	019b      	lsls	r3, r3, #6
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	621a      	str	r2, [r3, #32]
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40010400 	.word	0x40010400

08002c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a1a      	ldr	r2, [r3, #32]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a1a      	ldr	r2, [r3, #32]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e05a      	b.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a21      	ldr	r2, [pc, #132]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d022      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d01d      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d018      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1b      	ldr	r2, [pc, #108]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1a      	ldr	r2, [pc, #104]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00e      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a18      	ldr	r2, [pc, #96]	; (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d009      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d004      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a15      	ldr	r2, [pc, #84]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10c      	bne.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800
 8002dac:	40000c00 	.word	0x40000c00
 8002db0:	40010400 	.word	0x40010400
 8002db4:	40014000 	.word	0x40014000
 8002db8:	40001800 	.word	0x40001800

08002dbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e03f      	b.n	8002e4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe f902 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2224      	movs	r2, #36	; 0x24
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f929 	bl	8003058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b08a      	sub	sp, #40	; 0x28
 8002e5a:	af02      	add	r7, sp, #8
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	603b      	str	r3, [r7, #0]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d17c      	bne.n	8002f70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HAL_UART_Transmit+0x2c>
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e075      	b.n	8002f72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_UART_Transmit+0x3e>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e06e      	b.n	8002f72 <HAL_UART_Transmit+0x11c>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2221      	movs	r2, #33	; 0x21
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eaa:	f7fe fa1d 	bl	80012e8 <HAL_GetTick>
 8002eae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	88fa      	ldrh	r2, [r7, #6]
 8002eba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec4:	d108      	bne.n	8002ed8 <HAL_UART_Transmit+0x82>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d104      	bne.n	8002ed8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	e003      	b.n	8002ee0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ee8:	e02a      	b.n	8002f40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2180      	movs	r1, #128	; 0x80
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f840 	bl	8002f7a <UART_WaitOnFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e036      	b.n	8002f72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10b      	bne.n	8002f22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	61bb      	str	r3, [r7, #24]
 8002f20:	e007      	b.n	8002f32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1cf      	bne.n	8002eea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2140      	movs	r1, #64	; 0x40
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f810 	bl	8002f7a <UART_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e006      	b.n	8002f72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f70:	2302      	movs	r3, #2
  }
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b090      	sub	sp, #64	; 0x40
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	4613      	mov	r3, r2
 8002f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f8a:	e050      	b.n	800302e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d04c      	beq.n	800302e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <UART_WaitOnFlagUntilTimeout+0x30>
 8002f9a:	f7fe f9a5 	bl	80012e8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d241      	bcs.n	800302e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	330c      	adds	r3, #12
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	e853 3f00 	ldrex	r3, [r3]
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	330c      	adds	r3, #12
 8002fc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fca:	637a      	str	r2, [r7, #52]	; 0x34
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fd2:	e841 2300 	strex	r3, r2, [r1]
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e5      	bne.n	8002faa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3314      	adds	r3, #20
 8002fe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	e853 3f00 	ldrex	r3, [r3]
 8002fec:	613b      	str	r3, [r7, #16]
   return(result);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3314      	adds	r3, #20
 8002ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ffe:	623a      	str	r2, [r7, #32]
 8003000:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003002:	69f9      	ldr	r1, [r7, #28]
 8003004:	6a3a      	ldr	r2, [r7, #32]
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	61bb      	str	r3, [r7, #24]
   return(result);
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e5      	bne.n	8002fde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e00f      	b.n	800304e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4013      	ands	r3, r2
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	429a      	cmp	r2, r3
 800304a:	d09f      	beq.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3740      	adds	r7, #64	; 0x40
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800305c:	b09f      	sub	sp, #124	; 0x7c
 800305e:	af00      	add	r7, sp, #0
 8003060:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800306c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306e:	68d9      	ldr	r1, [r3, #12]
 8003070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	ea40 0301 	orr.w	r3, r0, r1
 8003078:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800307a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	431a      	orrs	r2, r3
 8003084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	431a      	orrs	r2, r3
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4313      	orrs	r3, r2
 8003090:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800309c:	f021 010c 	bic.w	r1, r1, #12
 80030a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030a6:	430b      	orrs	r3, r1
 80030a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b6:	6999      	ldr	r1, [r3, #24]
 80030b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	ea40 0301 	orr.w	r3, r0, r1
 80030c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4bc5      	ldr	r3, [pc, #788]	; (80033dc <UART_SetConfig+0x384>)
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d004      	beq.n	80030d6 <UART_SetConfig+0x7e>
 80030cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4bc3      	ldr	r3, [pc, #780]	; (80033e0 <UART_SetConfig+0x388>)
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d103      	bne.n	80030de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030d6:	f7fe fcd1 	bl	8001a7c <HAL_RCC_GetPCLK2Freq>
 80030da:	6778      	str	r0, [r7, #116]	; 0x74
 80030dc:	e002      	b.n	80030e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030de:	f7fe fcb9 	bl	8001a54 <HAL_RCC_GetPCLK1Freq>
 80030e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ec:	f040 80b6 	bne.w	800325c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f2:	461c      	mov	r4, r3
 80030f4:	f04f 0500 	mov.w	r5, #0
 80030f8:	4622      	mov	r2, r4
 80030fa:	462b      	mov	r3, r5
 80030fc:	1891      	adds	r1, r2, r2
 80030fe:	6439      	str	r1, [r7, #64]	; 0x40
 8003100:	415b      	adcs	r3, r3
 8003102:	647b      	str	r3, [r7, #68]	; 0x44
 8003104:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003108:	1912      	adds	r2, r2, r4
 800310a:	eb45 0303 	adc.w	r3, r5, r3
 800310e:	f04f 0000 	mov.w	r0, #0
 8003112:	f04f 0100 	mov.w	r1, #0
 8003116:	00d9      	lsls	r1, r3, #3
 8003118:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800311c:	00d0      	lsls	r0, r2, #3
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	1911      	adds	r1, r2, r4
 8003124:	6639      	str	r1, [r7, #96]	; 0x60
 8003126:	416b      	adcs	r3, r5
 8003128:	667b      	str	r3, [r7, #100]	; 0x64
 800312a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	461a      	mov	r2, r3
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	1891      	adds	r1, r2, r2
 8003136:	63b9      	str	r1, [r7, #56]	; 0x38
 8003138:	415b      	adcs	r3, r3
 800313a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003140:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003144:	f7fd f8bc 	bl	80002c0 <__aeabi_uldivmod>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4ba5      	ldr	r3, [pc, #660]	; (80033e4 <UART_SetConfig+0x38c>)
 800314e:	fba3 2302 	umull	r2, r3, r3, r2
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	011e      	lsls	r6, r3, #4
 8003156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003158:	461c      	mov	r4, r3
 800315a:	f04f 0500 	mov.w	r5, #0
 800315e:	4622      	mov	r2, r4
 8003160:	462b      	mov	r3, r5
 8003162:	1891      	adds	r1, r2, r2
 8003164:	6339      	str	r1, [r7, #48]	; 0x30
 8003166:	415b      	adcs	r3, r3
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
 800316a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800316e:	1912      	adds	r2, r2, r4
 8003170:	eb45 0303 	adc.w	r3, r5, r3
 8003174:	f04f 0000 	mov.w	r0, #0
 8003178:	f04f 0100 	mov.w	r1, #0
 800317c:	00d9      	lsls	r1, r3, #3
 800317e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003182:	00d0      	lsls	r0, r2, #3
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	1911      	adds	r1, r2, r4
 800318a:	65b9      	str	r1, [r7, #88]	; 0x58
 800318c:	416b      	adcs	r3, r5
 800318e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	461a      	mov	r2, r3
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	1891      	adds	r1, r2, r2
 800319c:	62b9      	str	r1, [r7, #40]	; 0x28
 800319e:	415b      	adcs	r3, r3
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031aa:	f7fd f889 	bl	80002c0 <__aeabi_uldivmod>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4b8c      	ldr	r3, [pc, #560]	; (80033e4 <UART_SetConfig+0x38c>)
 80031b4:	fba3 1302 	umull	r1, r3, r3, r2
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	2164      	movs	r1, #100	; 0x64
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	3332      	adds	r3, #50	; 0x32
 80031c6:	4a87      	ldr	r2, [pc, #540]	; (80033e4 <UART_SetConfig+0x38c>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031d4:	441e      	add	r6, r3
 80031d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d8:	4618      	mov	r0, r3
 80031da:	f04f 0100 	mov.w	r1, #0
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	1894      	adds	r4, r2, r2
 80031e4:	623c      	str	r4, [r7, #32]
 80031e6:	415b      	adcs	r3, r3
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031ee:	1812      	adds	r2, r2, r0
 80031f0:	eb41 0303 	adc.w	r3, r1, r3
 80031f4:	f04f 0400 	mov.w	r4, #0
 80031f8:	f04f 0500 	mov.w	r5, #0
 80031fc:	00dd      	lsls	r5, r3, #3
 80031fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003202:	00d4      	lsls	r4, r2, #3
 8003204:	4622      	mov	r2, r4
 8003206:	462b      	mov	r3, r5
 8003208:	1814      	adds	r4, r2, r0
 800320a:	653c      	str	r4, [r7, #80]	; 0x50
 800320c:	414b      	adcs	r3, r1
 800320e:	657b      	str	r3, [r7, #84]	; 0x54
 8003210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	461a      	mov	r2, r3
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	1891      	adds	r1, r2, r2
 800321c:	61b9      	str	r1, [r7, #24]
 800321e:	415b      	adcs	r3, r3
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003226:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800322a:	f7fd f849 	bl	80002c0 <__aeabi_uldivmod>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4b6c      	ldr	r3, [pc, #432]	; (80033e4 <UART_SetConfig+0x38c>)
 8003234:	fba3 1302 	umull	r1, r3, r3, r2
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	2164      	movs	r1, #100	; 0x64
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	3332      	adds	r3, #50	; 0x32
 8003246:	4a67      	ldr	r2, [pc, #412]	; (80033e4 <UART_SetConfig+0x38c>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	f003 0207 	and.w	r2, r3, #7
 8003252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4432      	add	r2, r6
 8003258:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800325a:	e0b9      	b.n	80033d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800325c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325e:	461c      	mov	r4, r3
 8003260:	f04f 0500 	mov.w	r5, #0
 8003264:	4622      	mov	r2, r4
 8003266:	462b      	mov	r3, r5
 8003268:	1891      	adds	r1, r2, r2
 800326a:	6139      	str	r1, [r7, #16]
 800326c:	415b      	adcs	r3, r3
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003274:	1912      	adds	r2, r2, r4
 8003276:	eb45 0303 	adc.w	r3, r5, r3
 800327a:	f04f 0000 	mov.w	r0, #0
 800327e:	f04f 0100 	mov.w	r1, #0
 8003282:	00d9      	lsls	r1, r3, #3
 8003284:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003288:	00d0      	lsls	r0, r2, #3
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	eb12 0804 	adds.w	r8, r2, r4
 8003292:	eb43 0905 	adc.w	r9, r3, r5
 8003296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4618      	mov	r0, r3
 800329c:	f04f 0100 	mov.w	r1, #0
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	008b      	lsls	r3, r1, #2
 80032aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032ae:	0082      	lsls	r2, r0, #2
 80032b0:	4640      	mov	r0, r8
 80032b2:	4649      	mov	r1, r9
 80032b4:	f7fd f804 	bl	80002c0 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4b49      	ldr	r3, [pc, #292]	; (80033e4 <UART_SetConfig+0x38c>)
 80032be:	fba3 2302 	umull	r2, r3, r3, r2
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	011e      	lsls	r6, r3, #4
 80032c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c8:	4618      	mov	r0, r3
 80032ca:	f04f 0100 	mov.w	r1, #0
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	1894      	adds	r4, r2, r2
 80032d4:	60bc      	str	r4, [r7, #8]
 80032d6:	415b      	adcs	r3, r3
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032de:	1812      	adds	r2, r2, r0
 80032e0:	eb41 0303 	adc.w	r3, r1, r3
 80032e4:	f04f 0400 	mov.w	r4, #0
 80032e8:	f04f 0500 	mov.w	r5, #0
 80032ec:	00dd      	lsls	r5, r3, #3
 80032ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032f2:	00d4      	lsls	r4, r2, #3
 80032f4:	4622      	mov	r2, r4
 80032f6:	462b      	mov	r3, r5
 80032f8:	1814      	adds	r4, r2, r0
 80032fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80032fc:	414b      	adcs	r3, r1
 80032fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4618      	mov	r0, r3
 8003306:	f04f 0100 	mov.w	r1, #0
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	008b      	lsls	r3, r1, #2
 8003314:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003318:	0082      	lsls	r2, r0, #2
 800331a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800331e:	f7fc ffcf 	bl	80002c0 <__aeabi_uldivmod>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <UART_SetConfig+0x38c>)
 8003328:	fba3 1302 	umull	r1, r3, r3, r2
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	2164      	movs	r1, #100	; 0x64
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	3332      	adds	r3, #50	; 0x32
 800333a:	4a2a      	ldr	r2, [pc, #168]	; (80033e4 <UART_SetConfig+0x38c>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003346:	441e      	add	r6, r3
 8003348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334a:	4618      	mov	r0, r3
 800334c:	f04f 0100 	mov.w	r1, #0
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	1894      	adds	r4, r2, r2
 8003356:	603c      	str	r4, [r7, #0]
 8003358:	415b      	adcs	r3, r3
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003360:	1812      	adds	r2, r2, r0
 8003362:	eb41 0303 	adc.w	r3, r1, r3
 8003366:	f04f 0400 	mov.w	r4, #0
 800336a:	f04f 0500 	mov.w	r5, #0
 800336e:	00dd      	lsls	r5, r3, #3
 8003370:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003374:	00d4      	lsls	r4, r2, #3
 8003376:	4622      	mov	r2, r4
 8003378:	462b      	mov	r3, r5
 800337a:	eb12 0a00 	adds.w	sl, r2, r0
 800337e:	eb43 0b01 	adc.w	fp, r3, r1
 8003382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4618      	mov	r0, r3
 8003388:	f04f 0100 	mov.w	r1, #0
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	008b      	lsls	r3, r1, #2
 8003396:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800339a:	0082      	lsls	r2, r0, #2
 800339c:	4650      	mov	r0, sl
 800339e:	4659      	mov	r1, fp
 80033a0:	f7fc ff8e 	bl	80002c0 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <UART_SetConfig+0x38c>)
 80033aa:	fba3 1302 	umull	r1, r3, r3, r2
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2164      	movs	r1, #100	; 0x64
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	3332      	adds	r3, #50	; 0x32
 80033bc:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <UART_SetConfig+0x38c>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	f003 020f 	and.w	r2, r3, #15
 80033c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4432      	add	r2, r6
 80033ce:	609a      	str	r2, [r3, #8]
}
 80033d0:	bf00      	nop
 80033d2:	377c      	adds	r7, #124	; 0x7c
 80033d4:	46bd      	mov	sp, r7
 80033d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033da:	bf00      	nop
 80033dc:	40011000 	.word	0x40011000
 80033e0:	40011400 	.word	0x40011400
 80033e4:	51eb851f 	.word	0x51eb851f

080033e8 <__errno>:
 80033e8:	4b01      	ldr	r3, [pc, #4]	; (80033f0 <__errno+0x8>)
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	2000000c 	.word	0x2000000c

080033f4 <__libc_init_array>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	4d0d      	ldr	r5, [pc, #52]	; (800342c <__libc_init_array+0x38>)
 80033f8:	4c0d      	ldr	r4, [pc, #52]	; (8003430 <__libc_init_array+0x3c>)
 80033fa:	1b64      	subs	r4, r4, r5
 80033fc:	10a4      	asrs	r4, r4, #2
 80033fe:	2600      	movs	r6, #0
 8003400:	42a6      	cmp	r6, r4
 8003402:	d109      	bne.n	8003418 <__libc_init_array+0x24>
 8003404:	4d0b      	ldr	r5, [pc, #44]	; (8003434 <__libc_init_array+0x40>)
 8003406:	4c0c      	ldr	r4, [pc, #48]	; (8003438 <__libc_init_array+0x44>)
 8003408:	f000 fc4e 	bl	8003ca8 <_init>
 800340c:	1b64      	subs	r4, r4, r5
 800340e:	10a4      	asrs	r4, r4, #2
 8003410:	2600      	movs	r6, #0
 8003412:	42a6      	cmp	r6, r4
 8003414:	d105      	bne.n	8003422 <__libc_init_array+0x2e>
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	f855 3b04 	ldr.w	r3, [r5], #4
 800341c:	4798      	blx	r3
 800341e:	3601      	adds	r6, #1
 8003420:	e7ee      	b.n	8003400 <__libc_init_array+0xc>
 8003422:	f855 3b04 	ldr.w	r3, [r5], #4
 8003426:	4798      	blx	r3
 8003428:	3601      	adds	r6, #1
 800342a:	e7f2      	b.n	8003412 <__libc_init_array+0x1e>
 800342c:	08003d2c 	.word	0x08003d2c
 8003430:	08003d2c 	.word	0x08003d2c
 8003434:	08003d2c 	.word	0x08003d2c
 8003438:	08003d30 	.word	0x08003d30

0800343c <memset>:
 800343c:	4402      	add	r2, r0
 800343e:	4603      	mov	r3, r0
 8003440:	4293      	cmp	r3, r2
 8003442:	d100      	bne.n	8003446 <memset+0xa>
 8003444:	4770      	bx	lr
 8003446:	f803 1b01 	strb.w	r1, [r3], #1
 800344a:	e7f9      	b.n	8003440 <memset+0x4>

0800344c <siprintf>:
 800344c:	b40e      	push	{r1, r2, r3}
 800344e:	b500      	push	{lr}
 8003450:	b09c      	sub	sp, #112	; 0x70
 8003452:	ab1d      	add	r3, sp, #116	; 0x74
 8003454:	9002      	str	r0, [sp, #8]
 8003456:	9006      	str	r0, [sp, #24]
 8003458:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800345c:	4809      	ldr	r0, [pc, #36]	; (8003484 <siprintf+0x38>)
 800345e:	9107      	str	r1, [sp, #28]
 8003460:	9104      	str	r1, [sp, #16]
 8003462:	4909      	ldr	r1, [pc, #36]	; (8003488 <siprintf+0x3c>)
 8003464:	f853 2b04 	ldr.w	r2, [r3], #4
 8003468:	9105      	str	r1, [sp, #20]
 800346a:	6800      	ldr	r0, [r0, #0]
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	a902      	add	r1, sp, #8
 8003470:	f000 f868 	bl	8003544 <_svfiprintf_r>
 8003474:	9b02      	ldr	r3, [sp, #8]
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
 800347a:	b01c      	add	sp, #112	; 0x70
 800347c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003480:	b003      	add	sp, #12
 8003482:	4770      	bx	lr
 8003484:	2000000c 	.word	0x2000000c
 8003488:	ffff0208 	.word	0xffff0208

0800348c <__ssputs_r>:
 800348c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003490:	688e      	ldr	r6, [r1, #8]
 8003492:	429e      	cmp	r6, r3
 8003494:	4682      	mov	sl, r0
 8003496:	460c      	mov	r4, r1
 8003498:	4690      	mov	r8, r2
 800349a:	461f      	mov	r7, r3
 800349c:	d838      	bhi.n	8003510 <__ssputs_r+0x84>
 800349e:	898a      	ldrh	r2, [r1, #12]
 80034a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034a4:	d032      	beq.n	800350c <__ssputs_r+0x80>
 80034a6:	6825      	ldr	r5, [r4, #0]
 80034a8:	6909      	ldr	r1, [r1, #16]
 80034aa:	eba5 0901 	sub.w	r9, r5, r1
 80034ae:	6965      	ldr	r5, [r4, #20]
 80034b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034b8:	3301      	adds	r3, #1
 80034ba:	444b      	add	r3, r9
 80034bc:	106d      	asrs	r5, r5, #1
 80034be:	429d      	cmp	r5, r3
 80034c0:	bf38      	it	cc
 80034c2:	461d      	movcc	r5, r3
 80034c4:	0553      	lsls	r3, r2, #21
 80034c6:	d531      	bpl.n	800352c <__ssputs_r+0xa0>
 80034c8:	4629      	mov	r1, r5
 80034ca:	f000 fb47 	bl	8003b5c <_malloc_r>
 80034ce:	4606      	mov	r6, r0
 80034d0:	b950      	cbnz	r0, 80034e8 <__ssputs_r+0x5c>
 80034d2:	230c      	movs	r3, #12
 80034d4:	f8ca 3000 	str.w	r3, [sl]
 80034d8:	89a3      	ldrh	r3, [r4, #12]
 80034da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034de:	81a3      	strh	r3, [r4, #12]
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
 80034e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e8:	6921      	ldr	r1, [r4, #16]
 80034ea:	464a      	mov	r2, r9
 80034ec:	f000 fabe 	bl	8003a6c <memcpy>
 80034f0:	89a3      	ldrh	r3, [r4, #12]
 80034f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034fa:	81a3      	strh	r3, [r4, #12]
 80034fc:	6126      	str	r6, [r4, #16]
 80034fe:	6165      	str	r5, [r4, #20]
 8003500:	444e      	add	r6, r9
 8003502:	eba5 0509 	sub.w	r5, r5, r9
 8003506:	6026      	str	r6, [r4, #0]
 8003508:	60a5      	str	r5, [r4, #8]
 800350a:	463e      	mov	r6, r7
 800350c:	42be      	cmp	r6, r7
 800350e:	d900      	bls.n	8003512 <__ssputs_r+0x86>
 8003510:	463e      	mov	r6, r7
 8003512:	4632      	mov	r2, r6
 8003514:	6820      	ldr	r0, [r4, #0]
 8003516:	4641      	mov	r1, r8
 8003518:	f000 fab6 	bl	8003a88 <memmove>
 800351c:	68a3      	ldr	r3, [r4, #8]
 800351e:	6822      	ldr	r2, [r4, #0]
 8003520:	1b9b      	subs	r3, r3, r6
 8003522:	4432      	add	r2, r6
 8003524:	60a3      	str	r3, [r4, #8]
 8003526:	6022      	str	r2, [r4, #0]
 8003528:	2000      	movs	r0, #0
 800352a:	e7db      	b.n	80034e4 <__ssputs_r+0x58>
 800352c:	462a      	mov	r2, r5
 800352e:	f000 fb6f 	bl	8003c10 <_realloc_r>
 8003532:	4606      	mov	r6, r0
 8003534:	2800      	cmp	r0, #0
 8003536:	d1e1      	bne.n	80034fc <__ssputs_r+0x70>
 8003538:	6921      	ldr	r1, [r4, #16]
 800353a:	4650      	mov	r0, sl
 800353c:	f000 fabe 	bl	8003abc <_free_r>
 8003540:	e7c7      	b.n	80034d2 <__ssputs_r+0x46>
	...

08003544 <_svfiprintf_r>:
 8003544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003548:	4698      	mov	r8, r3
 800354a:	898b      	ldrh	r3, [r1, #12]
 800354c:	061b      	lsls	r3, r3, #24
 800354e:	b09d      	sub	sp, #116	; 0x74
 8003550:	4607      	mov	r7, r0
 8003552:	460d      	mov	r5, r1
 8003554:	4614      	mov	r4, r2
 8003556:	d50e      	bpl.n	8003576 <_svfiprintf_r+0x32>
 8003558:	690b      	ldr	r3, [r1, #16]
 800355a:	b963      	cbnz	r3, 8003576 <_svfiprintf_r+0x32>
 800355c:	2140      	movs	r1, #64	; 0x40
 800355e:	f000 fafd 	bl	8003b5c <_malloc_r>
 8003562:	6028      	str	r0, [r5, #0]
 8003564:	6128      	str	r0, [r5, #16]
 8003566:	b920      	cbnz	r0, 8003572 <_svfiprintf_r+0x2e>
 8003568:	230c      	movs	r3, #12
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	f04f 30ff 	mov.w	r0, #4294967295
 8003570:	e0d1      	b.n	8003716 <_svfiprintf_r+0x1d2>
 8003572:	2340      	movs	r3, #64	; 0x40
 8003574:	616b      	str	r3, [r5, #20]
 8003576:	2300      	movs	r3, #0
 8003578:	9309      	str	r3, [sp, #36]	; 0x24
 800357a:	2320      	movs	r3, #32
 800357c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003580:	f8cd 800c 	str.w	r8, [sp, #12]
 8003584:	2330      	movs	r3, #48	; 0x30
 8003586:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003730 <_svfiprintf_r+0x1ec>
 800358a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800358e:	f04f 0901 	mov.w	r9, #1
 8003592:	4623      	mov	r3, r4
 8003594:	469a      	mov	sl, r3
 8003596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800359a:	b10a      	cbz	r2, 80035a0 <_svfiprintf_r+0x5c>
 800359c:	2a25      	cmp	r2, #37	; 0x25
 800359e:	d1f9      	bne.n	8003594 <_svfiprintf_r+0x50>
 80035a0:	ebba 0b04 	subs.w	fp, sl, r4
 80035a4:	d00b      	beq.n	80035be <_svfiprintf_r+0x7a>
 80035a6:	465b      	mov	r3, fp
 80035a8:	4622      	mov	r2, r4
 80035aa:	4629      	mov	r1, r5
 80035ac:	4638      	mov	r0, r7
 80035ae:	f7ff ff6d 	bl	800348c <__ssputs_r>
 80035b2:	3001      	adds	r0, #1
 80035b4:	f000 80aa 	beq.w	800370c <_svfiprintf_r+0x1c8>
 80035b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035ba:	445a      	add	r2, fp
 80035bc:	9209      	str	r2, [sp, #36]	; 0x24
 80035be:	f89a 3000 	ldrb.w	r3, [sl]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80a2 	beq.w	800370c <_svfiprintf_r+0x1c8>
 80035c8:	2300      	movs	r3, #0
 80035ca:	f04f 32ff 	mov.w	r2, #4294967295
 80035ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035d2:	f10a 0a01 	add.w	sl, sl, #1
 80035d6:	9304      	str	r3, [sp, #16]
 80035d8:	9307      	str	r3, [sp, #28]
 80035da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035de:	931a      	str	r3, [sp, #104]	; 0x68
 80035e0:	4654      	mov	r4, sl
 80035e2:	2205      	movs	r2, #5
 80035e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e8:	4851      	ldr	r0, [pc, #324]	; (8003730 <_svfiprintf_r+0x1ec>)
 80035ea:	f7fc fe19 	bl	8000220 <memchr>
 80035ee:	9a04      	ldr	r2, [sp, #16]
 80035f0:	b9d8      	cbnz	r0, 800362a <_svfiprintf_r+0xe6>
 80035f2:	06d0      	lsls	r0, r2, #27
 80035f4:	bf44      	itt	mi
 80035f6:	2320      	movmi	r3, #32
 80035f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035fc:	0711      	lsls	r1, r2, #28
 80035fe:	bf44      	itt	mi
 8003600:	232b      	movmi	r3, #43	; 0x2b
 8003602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003606:	f89a 3000 	ldrb.w	r3, [sl]
 800360a:	2b2a      	cmp	r3, #42	; 0x2a
 800360c:	d015      	beq.n	800363a <_svfiprintf_r+0xf6>
 800360e:	9a07      	ldr	r2, [sp, #28]
 8003610:	4654      	mov	r4, sl
 8003612:	2000      	movs	r0, #0
 8003614:	f04f 0c0a 	mov.w	ip, #10
 8003618:	4621      	mov	r1, r4
 800361a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800361e:	3b30      	subs	r3, #48	; 0x30
 8003620:	2b09      	cmp	r3, #9
 8003622:	d94e      	bls.n	80036c2 <_svfiprintf_r+0x17e>
 8003624:	b1b0      	cbz	r0, 8003654 <_svfiprintf_r+0x110>
 8003626:	9207      	str	r2, [sp, #28]
 8003628:	e014      	b.n	8003654 <_svfiprintf_r+0x110>
 800362a:	eba0 0308 	sub.w	r3, r0, r8
 800362e:	fa09 f303 	lsl.w	r3, r9, r3
 8003632:	4313      	orrs	r3, r2
 8003634:	9304      	str	r3, [sp, #16]
 8003636:	46a2      	mov	sl, r4
 8003638:	e7d2      	b.n	80035e0 <_svfiprintf_r+0x9c>
 800363a:	9b03      	ldr	r3, [sp, #12]
 800363c:	1d19      	adds	r1, r3, #4
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	9103      	str	r1, [sp, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	bfbb      	ittet	lt
 8003646:	425b      	neglt	r3, r3
 8003648:	f042 0202 	orrlt.w	r2, r2, #2
 800364c:	9307      	strge	r3, [sp, #28]
 800364e:	9307      	strlt	r3, [sp, #28]
 8003650:	bfb8      	it	lt
 8003652:	9204      	strlt	r2, [sp, #16]
 8003654:	7823      	ldrb	r3, [r4, #0]
 8003656:	2b2e      	cmp	r3, #46	; 0x2e
 8003658:	d10c      	bne.n	8003674 <_svfiprintf_r+0x130>
 800365a:	7863      	ldrb	r3, [r4, #1]
 800365c:	2b2a      	cmp	r3, #42	; 0x2a
 800365e:	d135      	bne.n	80036cc <_svfiprintf_r+0x188>
 8003660:	9b03      	ldr	r3, [sp, #12]
 8003662:	1d1a      	adds	r2, r3, #4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	9203      	str	r2, [sp, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	bfb8      	it	lt
 800366c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003670:	3402      	adds	r4, #2
 8003672:	9305      	str	r3, [sp, #20]
 8003674:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003740 <_svfiprintf_r+0x1fc>
 8003678:	7821      	ldrb	r1, [r4, #0]
 800367a:	2203      	movs	r2, #3
 800367c:	4650      	mov	r0, sl
 800367e:	f7fc fdcf 	bl	8000220 <memchr>
 8003682:	b140      	cbz	r0, 8003696 <_svfiprintf_r+0x152>
 8003684:	2340      	movs	r3, #64	; 0x40
 8003686:	eba0 000a 	sub.w	r0, r0, sl
 800368a:	fa03 f000 	lsl.w	r0, r3, r0
 800368e:	9b04      	ldr	r3, [sp, #16]
 8003690:	4303      	orrs	r3, r0
 8003692:	3401      	adds	r4, #1
 8003694:	9304      	str	r3, [sp, #16]
 8003696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800369a:	4826      	ldr	r0, [pc, #152]	; (8003734 <_svfiprintf_r+0x1f0>)
 800369c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036a0:	2206      	movs	r2, #6
 80036a2:	f7fc fdbd 	bl	8000220 <memchr>
 80036a6:	2800      	cmp	r0, #0
 80036a8:	d038      	beq.n	800371c <_svfiprintf_r+0x1d8>
 80036aa:	4b23      	ldr	r3, [pc, #140]	; (8003738 <_svfiprintf_r+0x1f4>)
 80036ac:	bb1b      	cbnz	r3, 80036f6 <_svfiprintf_r+0x1b2>
 80036ae:	9b03      	ldr	r3, [sp, #12]
 80036b0:	3307      	adds	r3, #7
 80036b2:	f023 0307 	bic.w	r3, r3, #7
 80036b6:	3308      	adds	r3, #8
 80036b8:	9303      	str	r3, [sp, #12]
 80036ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036bc:	4433      	add	r3, r6
 80036be:	9309      	str	r3, [sp, #36]	; 0x24
 80036c0:	e767      	b.n	8003592 <_svfiprintf_r+0x4e>
 80036c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80036c6:	460c      	mov	r4, r1
 80036c8:	2001      	movs	r0, #1
 80036ca:	e7a5      	b.n	8003618 <_svfiprintf_r+0xd4>
 80036cc:	2300      	movs	r3, #0
 80036ce:	3401      	adds	r4, #1
 80036d0:	9305      	str	r3, [sp, #20]
 80036d2:	4619      	mov	r1, r3
 80036d4:	f04f 0c0a 	mov.w	ip, #10
 80036d8:	4620      	mov	r0, r4
 80036da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036de:	3a30      	subs	r2, #48	; 0x30
 80036e0:	2a09      	cmp	r2, #9
 80036e2:	d903      	bls.n	80036ec <_svfiprintf_r+0x1a8>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0c5      	beq.n	8003674 <_svfiprintf_r+0x130>
 80036e8:	9105      	str	r1, [sp, #20]
 80036ea:	e7c3      	b.n	8003674 <_svfiprintf_r+0x130>
 80036ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80036f0:	4604      	mov	r4, r0
 80036f2:	2301      	movs	r3, #1
 80036f4:	e7f0      	b.n	80036d8 <_svfiprintf_r+0x194>
 80036f6:	ab03      	add	r3, sp, #12
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	462a      	mov	r2, r5
 80036fc:	4b0f      	ldr	r3, [pc, #60]	; (800373c <_svfiprintf_r+0x1f8>)
 80036fe:	a904      	add	r1, sp, #16
 8003700:	4638      	mov	r0, r7
 8003702:	f3af 8000 	nop.w
 8003706:	1c42      	adds	r2, r0, #1
 8003708:	4606      	mov	r6, r0
 800370a:	d1d6      	bne.n	80036ba <_svfiprintf_r+0x176>
 800370c:	89ab      	ldrh	r3, [r5, #12]
 800370e:	065b      	lsls	r3, r3, #25
 8003710:	f53f af2c 	bmi.w	800356c <_svfiprintf_r+0x28>
 8003714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003716:	b01d      	add	sp, #116	; 0x74
 8003718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800371c:	ab03      	add	r3, sp, #12
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	462a      	mov	r2, r5
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <_svfiprintf_r+0x1f8>)
 8003724:	a904      	add	r1, sp, #16
 8003726:	4638      	mov	r0, r7
 8003728:	f000 f87a 	bl	8003820 <_printf_i>
 800372c:	e7eb      	b.n	8003706 <_svfiprintf_r+0x1c2>
 800372e:	bf00      	nop
 8003730:	08003cf0 	.word	0x08003cf0
 8003734:	08003cfa 	.word	0x08003cfa
 8003738:	00000000 	.word	0x00000000
 800373c:	0800348d 	.word	0x0800348d
 8003740:	08003cf6 	.word	0x08003cf6

08003744 <_printf_common>:
 8003744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003748:	4616      	mov	r6, r2
 800374a:	4699      	mov	r9, r3
 800374c:	688a      	ldr	r2, [r1, #8]
 800374e:	690b      	ldr	r3, [r1, #16]
 8003750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003754:	4293      	cmp	r3, r2
 8003756:	bfb8      	it	lt
 8003758:	4613      	movlt	r3, r2
 800375a:	6033      	str	r3, [r6, #0]
 800375c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003760:	4607      	mov	r7, r0
 8003762:	460c      	mov	r4, r1
 8003764:	b10a      	cbz	r2, 800376a <_printf_common+0x26>
 8003766:	3301      	adds	r3, #1
 8003768:	6033      	str	r3, [r6, #0]
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	0699      	lsls	r1, r3, #26
 800376e:	bf42      	ittt	mi
 8003770:	6833      	ldrmi	r3, [r6, #0]
 8003772:	3302      	addmi	r3, #2
 8003774:	6033      	strmi	r3, [r6, #0]
 8003776:	6825      	ldr	r5, [r4, #0]
 8003778:	f015 0506 	ands.w	r5, r5, #6
 800377c:	d106      	bne.n	800378c <_printf_common+0x48>
 800377e:	f104 0a19 	add.w	sl, r4, #25
 8003782:	68e3      	ldr	r3, [r4, #12]
 8003784:	6832      	ldr	r2, [r6, #0]
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	42ab      	cmp	r3, r5
 800378a:	dc26      	bgt.n	80037da <_printf_common+0x96>
 800378c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003790:	1e13      	subs	r3, r2, #0
 8003792:	6822      	ldr	r2, [r4, #0]
 8003794:	bf18      	it	ne
 8003796:	2301      	movne	r3, #1
 8003798:	0692      	lsls	r2, r2, #26
 800379a:	d42b      	bmi.n	80037f4 <_printf_common+0xb0>
 800379c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037a0:	4649      	mov	r1, r9
 80037a2:	4638      	mov	r0, r7
 80037a4:	47c0      	blx	r8
 80037a6:	3001      	adds	r0, #1
 80037a8:	d01e      	beq.n	80037e8 <_printf_common+0xa4>
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	68e5      	ldr	r5, [r4, #12]
 80037ae:	6832      	ldr	r2, [r6, #0]
 80037b0:	f003 0306 	and.w	r3, r3, #6
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	bf08      	it	eq
 80037b8:	1aad      	subeq	r5, r5, r2
 80037ba:	68a3      	ldr	r3, [r4, #8]
 80037bc:	6922      	ldr	r2, [r4, #16]
 80037be:	bf0c      	ite	eq
 80037c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037c4:	2500      	movne	r5, #0
 80037c6:	4293      	cmp	r3, r2
 80037c8:	bfc4      	itt	gt
 80037ca:	1a9b      	subgt	r3, r3, r2
 80037cc:	18ed      	addgt	r5, r5, r3
 80037ce:	2600      	movs	r6, #0
 80037d0:	341a      	adds	r4, #26
 80037d2:	42b5      	cmp	r5, r6
 80037d4:	d11a      	bne.n	800380c <_printf_common+0xc8>
 80037d6:	2000      	movs	r0, #0
 80037d8:	e008      	b.n	80037ec <_printf_common+0xa8>
 80037da:	2301      	movs	r3, #1
 80037dc:	4652      	mov	r2, sl
 80037de:	4649      	mov	r1, r9
 80037e0:	4638      	mov	r0, r7
 80037e2:	47c0      	blx	r8
 80037e4:	3001      	adds	r0, #1
 80037e6:	d103      	bne.n	80037f0 <_printf_common+0xac>
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f0:	3501      	adds	r5, #1
 80037f2:	e7c6      	b.n	8003782 <_printf_common+0x3e>
 80037f4:	18e1      	adds	r1, r4, r3
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	2030      	movs	r0, #48	; 0x30
 80037fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037fe:	4422      	add	r2, r4
 8003800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003808:	3302      	adds	r3, #2
 800380a:	e7c7      	b.n	800379c <_printf_common+0x58>
 800380c:	2301      	movs	r3, #1
 800380e:	4622      	mov	r2, r4
 8003810:	4649      	mov	r1, r9
 8003812:	4638      	mov	r0, r7
 8003814:	47c0      	blx	r8
 8003816:	3001      	adds	r0, #1
 8003818:	d0e6      	beq.n	80037e8 <_printf_common+0xa4>
 800381a:	3601      	adds	r6, #1
 800381c:	e7d9      	b.n	80037d2 <_printf_common+0x8e>
	...

08003820 <_printf_i>:
 8003820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003824:	460c      	mov	r4, r1
 8003826:	4691      	mov	r9, r2
 8003828:	7e27      	ldrb	r7, [r4, #24]
 800382a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800382c:	2f78      	cmp	r7, #120	; 0x78
 800382e:	4680      	mov	r8, r0
 8003830:	469a      	mov	sl, r3
 8003832:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003836:	d807      	bhi.n	8003848 <_printf_i+0x28>
 8003838:	2f62      	cmp	r7, #98	; 0x62
 800383a:	d80a      	bhi.n	8003852 <_printf_i+0x32>
 800383c:	2f00      	cmp	r7, #0
 800383e:	f000 80d8 	beq.w	80039f2 <_printf_i+0x1d2>
 8003842:	2f58      	cmp	r7, #88	; 0x58
 8003844:	f000 80a3 	beq.w	800398e <_printf_i+0x16e>
 8003848:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800384c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003850:	e03a      	b.n	80038c8 <_printf_i+0xa8>
 8003852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003856:	2b15      	cmp	r3, #21
 8003858:	d8f6      	bhi.n	8003848 <_printf_i+0x28>
 800385a:	a001      	add	r0, pc, #4	; (adr r0, 8003860 <_printf_i+0x40>)
 800385c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003860:	080038b9 	.word	0x080038b9
 8003864:	080038cd 	.word	0x080038cd
 8003868:	08003849 	.word	0x08003849
 800386c:	08003849 	.word	0x08003849
 8003870:	08003849 	.word	0x08003849
 8003874:	08003849 	.word	0x08003849
 8003878:	080038cd 	.word	0x080038cd
 800387c:	08003849 	.word	0x08003849
 8003880:	08003849 	.word	0x08003849
 8003884:	08003849 	.word	0x08003849
 8003888:	08003849 	.word	0x08003849
 800388c:	080039d9 	.word	0x080039d9
 8003890:	080038fd 	.word	0x080038fd
 8003894:	080039bb 	.word	0x080039bb
 8003898:	08003849 	.word	0x08003849
 800389c:	08003849 	.word	0x08003849
 80038a0:	080039fb 	.word	0x080039fb
 80038a4:	08003849 	.word	0x08003849
 80038a8:	080038fd 	.word	0x080038fd
 80038ac:	08003849 	.word	0x08003849
 80038b0:	08003849 	.word	0x08003849
 80038b4:	080039c3 	.word	0x080039c3
 80038b8:	680b      	ldr	r3, [r1, #0]
 80038ba:	1d1a      	adds	r2, r3, #4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	600a      	str	r2, [r1, #0]
 80038c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0a3      	b.n	8003a14 <_printf_i+0x1f4>
 80038cc:	6825      	ldr	r5, [r4, #0]
 80038ce:	6808      	ldr	r0, [r1, #0]
 80038d0:	062e      	lsls	r6, r5, #24
 80038d2:	f100 0304 	add.w	r3, r0, #4
 80038d6:	d50a      	bpl.n	80038ee <_printf_i+0xce>
 80038d8:	6805      	ldr	r5, [r0, #0]
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	2d00      	cmp	r5, #0
 80038de:	da03      	bge.n	80038e8 <_printf_i+0xc8>
 80038e0:	232d      	movs	r3, #45	; 0x2d
 80038e2:	426d      	negs	r5, r5
 80038e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038e8:	485e      	ldr	r0, [pc, #376]	; (8003a64 <_printf_i+0x244>)
 80038ea:	230a      	movs	r3, #10
 80038ec:	e019      	b.n	8003922 <_printf_i+0x102>
 80038ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80038f2:	6805      	ldr	r5, [r0, #0]
 80038f4:	600b      	str	r3, [r1, #0]
 80038f6:	bf18      	it	ne
 80038f8:	b22d      	sxthne	r5, r5
 80038fa:	e7ef      	b.n	80038dc <_printf_i+0xbc>
 80038fc:	680b      	ldr	r3, [r1, #0]
 80038fe:	6825      	ldr	r5, [r4, #0]
 8003900:	1d18      	adds	r0, r3, #4
 8003902:	6008      	str	r0, [r1, #0]
 8003904:	0628      	lsls	r0, r5, #24
 8003906:	d501      	bpl.n	800390c <_printf_i+0xec>
 8003908:	681d      	ldr	r5, [r3, #0]
 800390a:	e002      	b.n	8003912 <_printf_i+0xf2>
 800390c:	0669      	lsls	r1, r5, #25
 800390e:	d5fb      	bpl.n	8003908 <_printf_i+0xe8>
 8003910:	881d      	ldrh	r5, [r3, #0]
 8003912:	4854      	ldr	r0, [pc, #336]	; (8003a64 <_printf_i+0x244>)
 8003914:	2f6f      	cmp	r7, #111	; 0x6f
 8003916:	bf0c      	ite	eq
 8003918:	2308      	moveq	r3, #8
 800391a:	230a      	movne	r3, #10
 800391c:	2100      	movs	r1, #0
 800391e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003922:	6866      	ldr	r6, [r4, #4]
 8003924:	60a6      	str	r6, [r4, #8]
 8003926:	2e00      	cmp	r6, #0
 8003928:	bfa2      	ittt	ge
 800392a:	6821      	ldrge	r1, [r4, #0]
 800392c:	f021 0104 	bicge.w	r1, r1, #4
 8003930:	6021      	strge	r1, [r4, #0]
 8003932:	b90d      	cbnz	r5, 8003938 <_printf_i+0x118>
 8003934:	2e00      	cmp	r6, #0
 8003936:	d04d      	beq.n	80039d4 <_printf_i+0x1b4>
 8003938:	4616      	mov	r6, r2
 800393a:	fbb5 f1f3 	udiv	r1, r5, r3
 800393e:	fb03 5711 	mls	r7, r3, r1, r5
 8003942:	5dc7      	ldrb	r7, [r0, r7]
 8003944:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003948:	462f      	mov	r7, r5
 800394a:	42bb      	cmp	r3, r7
 800394c:	460d      	mov	r5, r1
 800394e:	d9f4      	bls.n	800393a <_printf_i+0x11a>
 8003950:	2b08      	cmp	r3, #8
 8003952:	d10b      	bne.n	800396c <_printf_i+0x14c>
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	07df      	lsls	r7, r3, #31
 8003958:	d508      	bpl.n	800396c <_printf_i+0x14c>
 800395a:	6923      	ldr	r3, [r4, #16]
 800395c:	6861      	ldr	r1, [r4, #4]
 800395e:	4299      	cmp	r1, r3
 8003960:	bfde      	ittt	le
 8003962:	2330      	movle	r3, #48	; 0x30
 8003964:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003968:	f106 36ff 	addle.w	r6, r6, #4294967295
 800396c:	1b92      	subs	r2, r2, r6
 800396e:	6122      	str	r2, [r4, #16]
 8003970:	f8cd a000 	str.w	sl, [sp]
 8003974:	464b      	mov	r3, r9
 8003976:	aa03      	add	r2, sp, #12
 8003978:	4621      	mov	r1, r4
 800397a:	4640      	mov	r0, r8
 800397c:	f7ff fee2 	bl	8003744 <_printf_common>
 8003980:	3001      	adds	r0, #1
 8003982:	d14c      	bne.n	8003a1e <_printf_i+0x1fe>
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	b004      	add	sp, #16
 800398a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800398e:	4835      	ldr	r0, [pc, #212]	; (8003a64 <_printf_i+0x244>)
 8003990:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	680e      	ldr	r6, [r1, #0]
 8003998:	061f      	lsls	r7, r3, #24
 800399a:	f856 5b04 	ldr.w	r5, [r6], #4
 800399e:	600e      	str	r6, [r1, #0]
 80039a0:	d514      	bpl.n	80039cc <_printf_i+0x1ac>
 80039a2:	07d9      	lsls	r1, r3, #31
 80039a4:	bf44      	itt	mi
 80039a6:	f043 0320 	orrmi.w	r3, r3, #32
 80039aa:	6023      	strmi	r3, [r4, #0]
 80039ac:	b91d      	cbnz	r5, 80039b6 <_printf_i+0x196>
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	f023 0320 	bic.w	r3, r3, #32
 80039b4:	6023      	str	r3, [r4, #0]
 80039b6:	2310      	movs	r3, #16
 80039b8:	e7b0      	b.n	800391c <_printf_i+0xfc>
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	f043 0320 	orr.w	r3, r3, #32
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	2378      	movs	r3, #120	; 0x78
 80039c4:	4828      	ldr	r0, [pc, #160]	; (8003a68 <_printf_i+0x248>)
 80039c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039ca:	e7e3      	b.n	8003994 <_printf_i+0x174>
 80039cc:	065e      	lsls	r6, r3, #25
 80039ce:	bf48      	it	mi
 80039d0:	b2ad      	uxthmi	r5, r5
 80039d2:	e7e6      	b.n	80039a2 <_printf_i+0x182>
 80039d4:	4616      	mov	r6, r2
 80039d6:	e7bb      	b.n	8003950 <_printf_i+0x130>
 80039d8:	680b      	ldr	r3, [r1, #0]
 80039da:	6826      	ldr	r6, [r4, #0]
 80039dc:	6960      	ldr	r0, [r4, #20]
 80039de:	1d1d      	adds	r5, r3, #4
 80039e0:	600d      	str	r5, [r1, #0]
 80039e2:	0635      	lsls	r5, r6, #24
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	d501      	bpl.n	80039ec <_printf_i+0x1cc>
 80039e8:	6018      	str	r0, [r3, #0]
 80039ea:	e002      	b.n	80039f2 <_printf_i+0x1d2>
 80039ec:	0671      	lsls	r1, r6, #25
 80039ee:	d5fb      	bpl.n	80039e8 <_printf_i+0x1c8>
 80039f0:	8018      	strh	r0, [r3, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	6123      	str	r3, [r4, #16]
 80039f6:	4616      	mov	r6, r2
 80039f8:	e7ba      	b.n	8003970 <_printf_i+0x150>
 80039fa:	680b      	ldr	r3, [r1, #0]
 80039fc:	1d1a      	adds	r2, r3, #4
 80039fe:	600a      	str	r2, [r1, #0]
 8003a00:	681e      	ldr	r6, [r3, #0]
 8003a02:	6862      	ldr	r2, [r4, #4]
 8003a04:	2100      	movs	r1, #0
 8003a06:	4630      	mov	r0, r6
 8003a08:	f7fc fc0a 	bl	8000220 <memchr>
 8003a0c:	b108      	cbz	r0, 8003a12 <_printf_i+0x1f2>
 8003a0e:	1b80      	subs	r0, r0, r6
 8003a10:	6060      	str	r0, [r4, #4]
 8003a12:	6863      	ldr	r3, [r4, #4]
 8003a14:	6123      	str	r3, [r4, #16]
 8003a16:	2300      	movs	r3, #0
 8003a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a1c:	e7a8      	b.n	8003970 <_printf_i+0x150>
 8003a1e:	6923      	ldr	r3, [r4, #16]
 8003a20:	4632      	mov	r2, r6
 8003a22:	4649      	mov	r1, r9
 8003a24:	4640      	mov	r0, r8
 8003a26:	47d0      	blx	sl
 8003a28:	3001      	adds	r0, #1
 8003a2a:	d0ab      	beq.n	8003984 <_printf_i+0x164>
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	079b      	lsls	r3, r3, #30
 8003a30:	d413      	bmi.n	8003a5a <_printf_i+0x23a>
 8003a32:	68e0      	ldr	r0, [r4, #12]
 8003a34:	9b03      	ldr	r3, [sp, #12]
 8003a36:	4298      	cmp	r0, r3
 8003a38:	bfb8      	it	lt
 8003a3a:	4618      	movlt	r0, r3
 8003a3c:	e7a4      	b.n	8003988 <_printf_i+0x168>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	4632      	mov	r2, r6
 8003a42:	4649      	mov	r1, r9
 8003a44:	4640      	mov	r0, r8
 8003a46:	47d0      	blx	sl
 8003a48:	3001      	adds	r0, #1
 8003a4a:	d09b      	beq.n	8003984 <_printf_i+0x164>
 8003a4c:	3501      	adds	r5, #1
 8003a4e:	68e3      	ldr	r3, [r4, #12]
 8003a50:	9903      	ldr	r1, [sp, #12]
 8003a52:	1a5b      	subs	r3, r3, r1
 8003a54:	42ab      	cmp	r3, r5
 8003a56:	dcf2      	bgt.n	8003a3e <_printf_i+0x21e>
 8003a58:	e7eb      	b.n	8003a32 <_printf_i+0x212>
 8003a5a:	2500      	movs	r5, #0
 8003a5c:	f104 0619 	add.w	r6, r4, #25
 8003a60:	e7f5      	b.n	8003a4e <_printf_i+0x22e>
 8003a62:	bf00      	nop
 8003a64:	08003d01 	.word	0x08003d01
 8003a68:	08003d12 	.word	0x08003d12

08003a6c <memcpy>:
 8003a6c:	440a      	add	r2, r1
 8003a6e:	4291      	cmp	r1, r2
 8003a70:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a74:	d100      	bne.n	8003a78 <memcpy+0xc>
 8003a76:	4770      	bx	lr
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a82:	4291      	cmp	r1, r2
 8003a84:	d1f9      	bne.n	8003a7a <memcpy+0xe>
 8003a86:	bd10      	pop	{r4, pc}

08003a88 <memmove>:
 8003a88:	4288      	cmp	r0, r1
 8003a8a:	b510      	push	{r4, lr}
 8003a8c:	eb01 0402 	add.w	r4, r1, r2
 8003a90:	d902      	bls.n	8003a98 <memmove+0x10>
 8003a92:	4284      	cmp	r4, r0
 8003a94:	4623      	mov	r3, r4
 8003a96:	d807      	bhi.n	8003aa8 <memmove+0x20>
 8003a98:	1e43      	subs	r3, r0, #1
 8003a9a:	42a1      	cmp	r1, r4
 8003a9c:	d008      	beq.n	8003ab0 <memmove+0x28>
 8003a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003aa6:	e7f8      	b.n	8003a9a <memmove+0x12>
 8003aa8:	4402      	add	r2, r0
 8003aaa:	4601      	mov	r1, r0
 8003aac:	428a      	cmp	r2, r1
 8003aae:	d100      	bne.n	8003ab2 <memmove+0x2a>
 8003ab0:	bd10      	pop	{r4, pc}
 8003ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003aba:	e7f7      	b.n	8003aac <memmove+0x24>

08003abc <_free_r>:
 8003abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003abe:	2900      	cmp	r1, #0
 8003ac0:	d048      	beq.n	8003b54 <_free_r+0x98>
 8003ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ac6:	9001      	str	r0, [sp, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f1a1 0404 	sub.w	r4, r1, #4
 8003ace:	bfb8      	it	lt
 8003ad0:	18e4      	addlt	r4, r4, r3
 8003ad2:	f000 f8d3 	bl	8003c7c <__malloc_lock>
 8003ad6:	4a20      	ldr	r2, [pc, #128]	; (8003b58 <_free_r+0x9c>)
 8003ad8:	9801      	ldr	r0, [sp, #4]
 8003ada:	6813      	ldr	r3, [r2, #0]
 8003adc:	4615      	mov	r5, r2
 8003ade:	b933      	cbnz	r3, 8003aee <_free_r+0x32>
 8003ae0:	6063      	str	r3, [r4, #4]
 8003ae2:	6014      	str	r4, [r2, #0]
 8003ae4:	b003      	add	sp, #12
 8003ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003aea:	f000 b8cd 	b.w	8003c88 <__malloc_unlock>
 8003aee:	42a3      	cmp	r3, r4
 8003af0:	d90b      	bls.n	8003b0a <_free_r+0x4e>
 8003af2:	6821      	ldr	r1, [r4, #0]
 8003af4:	1862      	adds	r2, r4, r1
 8003af6:	4293      	cmp	r3, r2
 8003af8:	bf04      	itt	eq
 8003afa:	681a      	ldreq	r2, [r3, #0]
 8003afc:	685b      	ldreq	r3, [r3, #4]
 8003afe:	6063      	str	r3, [r4, #4]
 8003b00:	bf04      	itt	eq
 8003b02:	1852      	addeq	r2, r2, r1
 8003b04:	6022      	streq	r2, [r4, #0]
 8003b06:	602c      	str	r4, [r5, #0]
 8003b08:	e7ec      	b.n	8003ae4 <_free_r+0x28>
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	b10b      	cbz	r3, 8003b14 <_free_r+0x58>
 8003b10:	42a3      	cmp	r3, r4
 8003b12:	d9fa      	bls.n	8003b0a <_free_r+0x4e>
 8003b14:	6811      	ldr	r1, [r2, #0]
 8003b16:	1855      	adds	r5, r2, r1
 8003b18:	42a5      	cmp	r5, r4
 8003b1a:	d10b      	bne.n	8003b34 <_free_r+0x78>
 8003b1c:	6824      	ldr	r4, [r4, #0]
 8003b1e:	4421      	add	r1, r4
 8003b20:	1854      	adds	r4, r2, r1
 8003b22:	42a3      	cmp	r3, r4
 8003b24:	6011      	str	r1, [r2, #0]
 8003b26:	d1dd      	bne.n	8003ae4 <_free_r+0x28>
 8003b28:	681c      	ldr	r4, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	6053      	str	r3, [r2, #4]
 8003b2e:	4421      	add	r1, r4
 8003b30:	6011      	str	r1, [r2, #0]
 8003b32:	e7d7      	b.n	8003ae4 <_free_r+0x28>
 8003b34:	d902      	bls.n	8003b3c <_free_r+0x80>
 8003b36:	230c      	movs	r3, #12
 8003b38:	6003      	str	r3, [r0, #0]
 8003b3a:	e7d3      	b.n	8003ae4 <_free_r+0x28>
 8003b3c:	6825      	ldr	r5, [r4, #0]
 8003b3e:	1961      	adds	r1, r4, r5
 8003b40:	428b      	cmp	r3, r1
 8003b42:	bf04      	itt	eq
 8003b44:	6819      	ldreq	r1, [r3, #0]
 8003b46:	685b      	ldreq	r3, [r3, #4]
 8003b48:	6063      	str	r3, [r4, #4]
 8003b4a:	bf04      	itt	eq
 8003b4c:	1949      	addeq	r1, r1, r5
 8003b4e:	6021      	streq	r1, [r4, #0]
 8003b50:	6054      	str	r4, [r2, #4]
 8003b52:	e7c7      	b.n	8003ae4 <_free_r+0x28>
 8003b54:	b003      	add	sp, #12
 8003b56:	bd30      	pop	{r4, r5, pc}
 8003b58:	20000090 	.word	0x20000090

08003b5c <_malloc_r>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	1ccd      	adds	r5, r1, #3
 8003b60:	f025 0503 	bic.w	r5, r5, #3
 8003b64:	3508      	adds	r5, #8
 8003b66:	2d0c      	cmp	r5, #12
 8003b68:	bf38      	it	cc
 8003b6a:	250c      	movcc	r5, #12
 8003b6c:	2d00      	cmp	r5, #0
 8003b6e:	4606      	mov	r6, r0
 8003b70:	db01      	blt.n	8003b76 <_malloc_r+0x1a>
 8003b72:	42a9      	cmp	r1, r5
 8003b74:	d903      	bls.n	8003b7e <_malloc_r+0x22>
 8003b76:	230c      	movs	r3, #12
 8003b78:	6033      	str	r3, [r6, #0]
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b7e:	f000 f87d 	bl	8003c7c <__malloc_lock>
 8003b82:	4921      	ldr	r1, [pc, #132]	; (8003c08 <_malloc_r+0xac>)
 8003b84:	680a      	ldr	r2, [r1, #0]
 8003b86:	4614      	mov	r4, r2
 8003b88:	b99c      	cbnz	r4, 8003bb2 <_malloc_r+0x56>
 8003b8a:	4f20      	ldr	r7, [pc, #128]	; (8003c0c <_malloc_r+0xb0>)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	b923      	cbnz	r3, 8003b9a <_malloc_r+0x3e>
 8003b90:	4621      	mov	r1, r4
 8003b92:	4630      	mov	r0, r6
 8003b94:	f000 f862 	bl	8003c5c <_sbrk_r>
 8003b98:	6038      	str	r0, [r7, #0]
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	f000 f85d 	bl	8003c5c <_sbrk_r>
 8003ba2:	1c43      	adds	r3, r0, #1
 8003ba4:	d123      	bne.n	8003bee <_malloc_r+0x92>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	6033      	str	r3, [r6, #0]
 8003baa:	4630      	mov	r0, r6
 8003bac:	f000 f86c 	bl	8003c88 <__malloc_unlock>
 8003bb0:	e7e3      	b.n	8003b7a <_malloc_r+0x1e>
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	1b5b      	subs	r3, r3, r5
 8003bb6:	d417      	bmi.n	8003be8 <_malloc_r+0x8c>
 8003bb8:	2b0b      	cmp	r3, #11
 8003bba:	d903      	bls.n	8003bc4 <_malloc_r+0x68>
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	441c      	add	r4, r3
 8003bc0:	6025      	str	r5, [r4, #0]
 8003bc2:	e004      	b.n	8003bce <_malloc_r+0x72>
 8003bc4:	6863      	ldr	r3, [r4, #4]
 8003bc6:	42a2      	cmp	r2, r4
 8003bc8:	bf0c      	ite	eq
 8003bca:	600b      	streq	r3, [r1, #0]
 8003bcc:	6053      	strne	r3, [r2, #4]
 8003bce:	4630      	mov	r0, r6
 8003bd0:	f000 f85a 	bl	8003c88 <__malloc_unlock>
 8003bd4:	f104 000b 	add.w	r0, r4, #11
 8003bd8:	1d23      	adds	r3, r4, #4
 8003bda:	f020 0007 	bic.w	r0, r0, #7
 8003bde:	1ac2      	subs	r2, r0, r3
 8003be0:	d0cc      	beq.n	8003b7c <_malloc_r+0x20>
 8003be2:	1a1b      	subs	r3, r3, r0
 8003be4:	50a3      	str	r3, [r4, r2]
 8003be6:	e7c9      	b.n	8003b7c <_malloc_r+0x20>
 8003be8:	4622      	mov	r2, r4
 8003bea:	6864      	ldr	r4, [r4, #4]
 8003bec:	e7cc      	b.n	8003b88 <_malloc_r+0x2c>
 8003bee:	1cc4      	adds	r4, r0, #3
 8003bf0:	f024 0403 	bic.w	r4, r4, #3
 8003bf4:	42a0      	cmp	r0, r4
 8003bf6:	d0e3      	beq.n	8003bc0 <_malloc_r+0x64>
 8003bf8:	1a21      	subs	r1, r4, r0
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f000 f82e 	bl	8003c5c <_sbrk_r>
 8003c00:	3001      	adds	r0, #1
 8003c02:	d1dd      	bne.n	8003bc0 <_malloc_r+0x64>
 8003c04:	e7cf      	b.n	8003ba6 <_malloc_r+0x4a>
 8003c06:	bf00      	nop
 8003c08:	20000090 	.word	0x20000090
 8003c0c:	20000094 	.word	0x20000094

08003c10 <_realloc_r>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	4607      	mov	r7, r0
 8003c14:	4614      	mov	r4, r2
 8003c16:	460e      	mov	r6, r1
 8003c18:	b921      	cbnz	r1, 8003c24 <_realloc_r+0x14>
 8003c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c1e:	4611      	mov	r1, r2
 8003c20:	f7ff bf9c 	b.w	8003b5c <_malloc_r>
 8003c24:	b922      	cbnz	r2, 8003c30 <_realloc_r+0x20>
 8003c26:	f7ff ff49 	bl	8003abc <_free_r>
 8003c2a:	4625      	mov	r5, r4
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c30:	f000 f830 	bl	8003c94 <_malloc_usable_size_r>
 8003c34:	42a0      	cmp	r0, r4
 8003c36:	d20f      	bcs.n	8003c58 <_realloc_r+0x48>
 8003c38:	4621      	mov	r1, r4
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	f7ff ff8e 	bl	8003b5c <_malloc_r>
 8003c40:	4605      	mov	r5, r0
 8003c42:	2800      	cmp	r0, #0
 8003c44:	d0f2      	beq.n	8003c2c <_realloc_r+0x1c>
 8003c46:	4631      	mov	r1, r6
 8003c48:	4622      	mov	r2, r4
 8003c4a:	f7ff ff0f 	bl	8003a6c <memcpy>
 8003c4e:	4631      	mov	r1, r6
 8003c50:	4638      	mov	r0, r7
 8003c52:	f7ff ff33 	bl	8003abc <_free_r>
 8003c56:	e7e9      	b.n	8003c2c <_realloc_r+0x1c>
 8003c58:	4635      	mov	r5, r6
 8003c5a:	e7e7      	b.n	8003c2c <_realloc_r+0x1c>

08003c5c <_sbrk_r>:
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	4d06      	ldr	r5, [pc, #24]	; (8003c78 <_sbrk_r+0x1c>)
 8003c60:	2300      	movs	r3, #0
 8003c62:	4604      	mov	r4, r0
 8003c64:	4608      	mov	r0, r1
 8003c66:	602b      	str	r3, [r5, #0]
 8003c68:	f7fd fa66 	bl	8001138 <_sbrk>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d102      	bne.n	8003c76 <_sbrk_r+0x1a>
 8003c70:	682b      	ldr	r3, [r5, #0]
 8003c72:	b103      	cbz	r3, 8003c76 <_sbrk_r+0x1a>
 8003c74:	6023      	str	r3, [r4, #0]
 8003c76:	bd38      	pop	{r3, r4, r5, pc}
 8003c78:	200001ac 	.word	0x200001ac

08003c7c <__malloc_lock>:
 8003c7c:	4801      	ldr	r0, [pc, #4]	; (8003c84 <__malloc_lock+0x8>)
 8003c7e:	f000 b811 	b.w	8003ca4 <__retarget_lock_acquire_recursive>
 8003c82:	bf00      	nop
 8003c84:	200001b4 	.word	0x200001b4

08003c88 <__malloc_unlock>:
 8003c88:	4801      	ldr	r0, [pc, #4]	; (8003c90 <__malloc_unlock+0x8>)
 8003c8a:	f000 b80c 	b.w	8003ca6 <__retarget_lock_release_recursive>
 8003c8e:	bf00      	nop
 8003c90:	200001b4 	.word	0x200001b4

08003c94 <_malloc_usable_size_r>:
 8003c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c98:	1f18      	subs	r0, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bfbc      	itt	lt
 8003c9e:	580b      	ldrlt	r3, [r1, r0]
 8003ca0:	18c0      	addlt	r0, r0, r3
 8003ca2:	4770      	bx	lr

08003ca4 <__retarget_lock_acquire_recursive>:
 8003ca4:	4770      	bx	lr

08003ca6 <__retarget_lock_release_recursive>:
 8003ca6:	4770      	bx	lr

08003ca8 <_init>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	bf00      	nop
 8003cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cae:	bc08      	pop	{r3}
 8003cb0:	469e      	mov	lr, r3
 8003cb2:	4770      	bx	lr

08003cb4 <_fini>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	bf00      	nop
 8003cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cba:	bc08      	pop	{r3}
 8003cbc:	469e      	mov	lr, r3
 8003cbe:	4770      	bx	lr
